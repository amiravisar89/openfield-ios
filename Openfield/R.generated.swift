//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let entitlements = entitlements()
  let id = id()
  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en-US"
  }

  /// This `_R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }
    var strings: strings { .init(source: .init(bundle: bundle, tableName: "Strings", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }
    func strings(preferredLanguages: [String]) -> strings {
      .init(source: .init(bundle: bundle, tableName: "Strings", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 290 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en-US translation: Currently only available on web
      ///
      /// Key: account::availbleOnWeb
      ///
      /// Locales: en-US
      var accountAvailbleOnWeb: RswiftResources.StringResource { .init(key: "account::availbleOnWeb", tableName: "Localizable", source: source, developmentValue: "Currently only available on web", comment: nil) }

      /// en-US translation: Help center
      ///
      /// Key: account::helpCenter
      ///
      /// Locales: en-US
      var accountHelpCenter: RswiftResources.StringResource { .init(key: "account::helpCenter", tableName: "Localizable", source: source, developmentValue: "Help center", comment: nil) }

      /// en-US translation: Insert role
      ///
      /// Key: account::insertRole
      ///
      /// Locales: en-US
      var accountInsertRole: RswiftResources.StringResource { .init(key: "account::insertRole", tableName: "Localizable", source: source, developmentValue: "Insert role", comment: nil) }

      /// en-US translation: Last image: %@
      ///
      /// Key: account::lastImage_IOS
      ///
      /// Locales: en-US
      var accountLastImage_IOS: RswiftResources.StringResource1<String> { .init(key: "account::lastImage_IOS", tableName: "Localizable", source: source, developmentValue: "Last image: %@", comment: nil) }

      /// en-US translation: Log out
      ///
      /// Key: account::logout
      ///
      /// Locales: en-US
      var accountLogout: RswiftResources.StringResource { .init(key: "account::logout", tableName: "Localizable", source: source, developmentValue: "Log out", comment: nil) }

      /// en-US translation: Log out
      ///
      /// Key: account::logoutPopUpOk
      ///
      /// Locales: en-US
      var accountLogoutPopUpOk: RswiftResources.StringResource { .init(key: "account::logoutPopUpOk", tableName: "Localizable", source: source, developmentValue: "Log out", comment: nil) }

      /// en-US translation: Are you sure you want to log out?
      ///
      /// Key: account::logoutPopUpTitle
      ///
      /// Locales: en-US
      var accountLogoutPopUpTitle: RswiftResources.StringResource { .init(key: "account::logoutPopUpTitle", tableName: "Localizable", source: source, developmentValue: "Are you sure you want\nto log out?", comment: nil) }

      /// en-US translation: Manage fields, subscriptions and contacts
      ///
      /// Key: account::manageAccount
      ///
      /// Locales: en-US
      var accountManageAccount: RswiftResources.StringResource { .init(key: "account::manageAccount", tableName: "Localizable", source: source, developmentValue: "Manage fields, subscriptions and contacts", comment: nil) }

      /// en-US translation: Manage your contacts and fields
      ///
      /// Key: account::manageContactsFields
      ///
      /// Locales: en-US
      var accountManageContactsFields: RswiftResources.StringResource { .init(key: "account::manageContactsFields", tableName: "Localizable", source: source, developmentValue: "Manage your contacts and fields", comment: nil) }

      /// en-US translation: MyJohnDeere
      ///
      /// Key: account::myJohnDeere
      ///
      /// Locales: en-US
      var accountMyJohnDeere: RswiftResources.StringResource { .init(key: "account::myJohnDeere", tableName: "Localizable", source: source, developmentValue: "MyJohnDeere", comment: nil) }

      /// en-US translation: My role
      ///
      /// Key: account::myRole
      ///
      /// Locales: en-US
      var accountMyRole: RswiftResources.StringResource { .init(key: "account::myRole", tableName: "Localizable", source: source, developmentValue: "My role", comment: nil) }

      /// en-US translation: No results found
      ///
      /// Key: account::noResultsFound
      ///
      /// Locales: en-US
      var accountNoResultsFound: RswiftResources.StringResource { .init(key: "account::noResultsFound", tableName: "Localizable", source: source, developmentValue: "No results found", comment: nil) }

      /// en-US translation: Your notifications are disabled
      ///
      /// Key: account::notificationDisabled
      ///
      /// Locales: en-US
      var accountNotificationDisabled: RswiftResources.StringResource { .init(key: "account::notificationDisabled", tableName: "Localizable", source: source, developmentValue: "Your notifications are disabled", comment: nil) }

      /// en-US translation: Notifications
      ///
      /// Key: account::notifications
      ///
      /// Locales: en-US
      var accountNotifications: RswiftResources.StringResource { .init(key: "account::notifications", tableName: "Localizable", source: source, developmentValue: "Notifications", comment: nil) }

      /// en-US translation: Would you like to continue?
      ///
      /// Key: account::notificationsPopUpSubtitle
      ///
      /// Locales: en-US
      var accountNotificationsPopUpSubtitle: RswiftResources.StringResource { .init(key: "account::notificationsPopUpSubtitle", tableName: "Localizable", source: source, developmentValue: "Would you like to continue?", comment: nil) }

      /// en-US translation: Your notifications will be disabled!
      ///
      /// Key: account::notificationsPopUpTitle
      ///
      /// Locales: en-US
      var accountNotificationsPopUpTitle: RswiftResources.StringResource { .init(key: "account::notificationsPopUpTitle", tableName: "Localizable", source: source, developmentValue: "Your notifications\nwill be disabled!", comment: nil) }

      /// en-US translation: Push
      ///
      /// Key: account::push
      ///
      /// Locales: en-US
      var accountPush: RswiftResources.StringResource { .init(key: "account::push", tableName: "Localizable", source: source, developmentValue: "Push", comment: nil) }

      /// en-US translation: Retrieve field information and operations data from your JD account
      ///
      /// Key: account::retrieveJDAccount
      ///
      /// Locales: en-US
      var accountRetrieveJDAccount: RswiftResources.StringResource { .init(key: "account::retrieveJDAccount", tableName: "Localizable", source: source, developmentValue: "Retrieve field information and\noperations data from your JD account", comment: nil) }

      /// en-US translation: Select the way you would like to get notified on new insights
      ///
      /// Key: account::selectNotificationType
      ///
      /// Locales: en-US
      var accountSelectNotificationType: RswiftResources.StringResource { .init(key: "account::selectNotificationType", tableName: "Localizable", source: source, developmentValue: "Select the way you would like to get\nnotified on new insights", comment: nil) }

      /// en-US translation: Sending SMS to: %@
      ///
      /// Key: account::sendingSMSTo_iOS
      ///
      /// Locales: en-US
      var accountSendingSMSTo_iOS: RswiftResources.StringResource1<String> { .init(key: "account::sendingSMSTo_iOS", tableName: "Localizable", source: source, developmentValue: "Sending SMS to: %@", comment: nil) }

      /// en-US translation: Sent between 07:00 a.m. - 09:00 p.m.
      ///
      /// Key: account::sentBetweenPush
      ///
      /// Locales: en-US
      var accountSentBetweenPush: RswiftResources.StringResource { .init(key: "account::sentBetweenPush", tableName: "Localizable", source: source, developmentValue: "Sent between 07:00 a.m. - 09:00 p.m.", comment: nil) }

      /// en-US translation: Sent between 07:00 a.m. - 09:00 p.m.
      ///
      /// Key: account::sentBetweenSMS
      ///
      /// Locales: en-US
      var accountSentBetweenSMS: RswiftResources.StringResource { .init(key: "account::sentBetweenSMS", tableName: "Localizable", source: source, developmentValue: "Sent between 07:00 a.m. - 09:00 p.m.", comment: nil) }

      /// en-US translation: Settings
      ///
      /// Key: account::settings
      ///
      /// Locales: en-US
      var accountSettings: RswiftResources.StringResource { .init(key: "account::settings", tableName: "Localizable", source: source, developmentValue: "Settings", comment: nil) }

      /// en-US translation: SMS
      ///
      /// Key: account::sms
      ///
      /// Locales: en-US
      var accountSms: RswiftResources.StringResource { .init(key: "account::sms", tableName: "Localizable", source: source, developmentValue: "SMS", comment: nil) }

      /// en-US translation: Team
      ///
      /// Key: account::team
      ///
      /// Locales: en-US
      var accountTeam: RswiftResources.StringResource { .init(key: "account::team", tableName: "Localizable", source: source, developmentValue: "Team", comment: nil) }

      /// en-US translation: Your account
      ///
      /// Key: account::yourAccount
      ///
      /// Locales: en-US
      var accountYourAccount: RswiftResources.StringResource { .init(key: "account::yourAccount", tableName: "Localizable", source: source, developmentValue: "Your account", comment: nil) }

      /// en-US translation: Airplane
      ///
      /// Key: airplaneType
      ///
      /// Locales: en-US
      var airplaneType: RswiftResources.StringResource { .init(key: "airplaneType", tableName: "Localizable", source: source, developmentValue: "Airplane", comment: nil) }

      /// en-US translation: Image date
      ///
      /// Key: analysis::analysisImageDate
      ///
      /// Locales: en-US
      var analysisAnalysisImageDate: RswiftResources.StringResource { .init(key: "analysis::analysisImageDate", tableName: "Localizable", source: source, developmentValue: "Image date", comment: nil) }

      /// en-US translation: Image type
      ///
      /// Key: analysis::analysisImageType
      ///
      /// Locales: en-US
      var analysisAnalysisImageType: RswiftResources.StringResource { .init(key: "analysis::analysisImageType", tableName: "Localizable", source: source, developmentValue: "Image type", comment: nil) }

      /// en-US translation: Insights
      ///
      /// Key: analysis::analysisInsights
      ///
      /// Locales: en-US
      var analysisAnalysisInsights: RswiftResources.StringResource { .init(key: "analysis::analysisInsights", tableName: "Localizable", source: source, developmentValue: "Insights", comment: nil) }

      /// en-US translation: Analysis mode
      ///
      /// Key: analysis::analysisMode
      ///
      /// Locales: en-US
      var analysisAnalysisMode: RswiftResources.StringResource { .init(key: "analysis::analysisMode", tableName: "Localizable", source: source, developmentValue: "Analysis mode", comment: nil) }

      /// en-US translation: %@ selected
      ///
      /// Key: analysis::multipleInsightsSelected_IOS
      ///
      /// Locales: en-US
      var analysisMultipleInsightsSelected_IOS: RswiftResources.StringResource1<String> { .init(key: "analysis::multipleInsightsSelected_IOS", tableName: "Localizable", source: source, developmentValue: "%@ selected", comment: nil) }

      /// en-US translation: Select
      ///
      /// Key: analysis::selectInsights
      ///
      /// Locales: en-US
      var analysisSelectInsights: RswiftResources.StringResource { .init(key: "analysis::selectInsights", tableName: "Localizable", source: source, developmentValue: "Select", comment: nil) }

      /// en-US translation: Apply
      ///
      /// Key: apply
      ///
      /// Locales: en-US
      var apply: RswiftResources.StringResource { .init(key: "apply", tableName: "Localizable", source: source, developmentValue: "Apply", comment: nil) }

      /// en-US translation: Back
      ///
      /// Key: back
      ///
      /// Locales: en-US
      var back: RswiftResources.StringResource { .init(key: "back", tableName: "Localizable", source: source, developmentValue: "Back", comment: nil) }

      /// en-US translation: Cancel
      ///
      /// Key: cancel
      ///
      /// Locales: en-US
      var cancel: RswiftResources.StringResource { .init(key: "cancel", tableName: "Localizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en-US translation: Close
      ///
      /// Key: closeButton
      ///
      /// Locales: en-US
      var closeButton: RswiftResources.StringResource { .init(key: "closeButton", tableName: "Localizable", source: source, developmentValue: "Close", comment: nil) }

      /// en-US translation: Check it out in the analysis screen
      ///
      /// Key: compare::checkItOut
      ///
      /// Locales: en-US
      var compareCheckItOut: RswiftResources.StringResource { .init(key: "compare::checkItOut", tableName: "Localizable", source: source, developmentValue: "Check it out in the\nanalysis screen", comment: nil) }

      /// en-US translation: Compare Fields
      ///
      /// Key: compare::compareFields
      ///
      /// Locales: en-US
      var compareCompareFields: RswiftResources.StringResource { .init(key: "compare::compareFields", tableName: "Localizable", source: source, developmentValue: "Compare Fields", comment: nil) }

      /// en-US translation: Track changes by comparing different dates or layers of your fields. 
      ///
      /// Key: compare::comparingDifferentDatesOrLayers
      ///
      /// Locales: en-US
      var compareComparingDifferentDatesOrLayers: RswiftResources.StringResource { .init(key: "compare::comparingDifferentDatesOrLayers", tableName: "Localizable", source: source, developmentValue: "Track changes by comparing different dates or layers of your fields. ", comment: nil) }

      /// en-US translation: Check it out in the analysis screen
      ///
      /// Key: compare:checkOutInAnalysis
      ///
      /// Locales: en-US
      var compareCheckOutInAnalysis: RswiftResources.StringResource { .init(key: "compare:checkOutInAnalysis", tableName: "Localizable", source: source, developmentValue: "Check it out in the analysis screen", comment: nil) }

      /// en-US translation: Continue
      ///
      /// Key: continue
      ///
      /// Locales: en-US
      var `continue`: RswiftResources.StringResource { .init(key: "continue", tableName: "Localizable", source: source, developmentValue: "Continue", comment: nil) }

      /// en-US translation: Accept
      ///
      /// Key: contract::acceptBtn
      ///
      /// Locales: en-US
      var contractAcceptBtn: RswiftResources.StringResource { .init(key: "contract::acceptBtn", tableName: "Localizable", source: source, developmentValue: "Accept", comment: nil) }

      /// en-US translation: Done
      ///
      /// Key: contract::btnDone
      ///
      /// Locales: en-US
      var contractBtnDone: RswiftResources.StringResource { .init(key: "contract::btnDone", tableName: "Localizable", source: source, developmentValue: "Done", comment: nil) }

      /// en-US translation: Get Started
      ///
      /// Key: contract::btnGetStarted
      ///
      /// Locales: en-US
      var contractBtnGetStarted: RswiftResources.StringResource { .init(key: "contract::btnGetStarted", tableName: "Localizable", source: source, developmentValue: "Get Started", comment: nil) }

      /// en-US translation: Next
      ///
      /// Key: contract::btnNext
      ///
      /// Locales: en-US
      var contractBtnNext: RswiftResources.StringResource { .init(key: "contract::btnNext", tableName: "Localizable", source: source, developmentValue: "Next", comment: nil) }

      /// en-US translation: here
      ///
      /// Key: contract::changesLinkablePart
      ///
      /// Locales: en-US
      var contractChangesLinkablePart: RswiftResources.StringResource { .init(key: "contract::changesLinkablePart", tableName: "Localizable", source: source, developmentValue: "here", comment: nil) }

      /// en-US translation: Changes
      ///
      /// Key: contract::changesTitle
      ///
      /// Locales: en-US
      var contractChangesTitle: RswiftResources.StringResource { .init(key: "contract::changesTitle", tableName: "Localizable", source: source, developmentValue: "Changes", comment: nil) }

      /// en-US translation: privacy policy
      ///
      /// Key: contract::ppLinkablePart
      ///
      /// Locales: en-US
      var contractPpLinkablePart: RswiftResources.StringResource { .init(key: "contract::ppLinkablePart", tableName: "Localizable", source: source, developmentValue: "privacy policy", comment: nil) }

      /// en-US translation: Privacy Policy
      ///
      /// Key: contract::ppTitle
      ///
      /// Locales: en-US
      var contractPpTitle: RswiftResources.StringResource { .init(key: "contract::ppTitle", tableName: "Localizable", source: source, developmentValue: "Privacy Policy", comment: nil) }

      /// en-US translation: Support
      ///
      /// Key: contract::supportLinkablePart
      ///
      /// Locales: en-US
      var contractSupportLinkablePart: RswiftResources.StringResource { .init(key: "contract::supportLinkablePart", tableName: "Localizable", source: source, developmentValue: "Support", comment: nil) }

      /// en-US translation: You must check the box to continue
      ///
      /// Key: contract::termOfSseCheckboxError
      ///
      /// Locales: en-US
      var contractTermOfSseCheckboxError: RswiftResources.StringResource { .init(key: "contract::termOfSseCheckboxError", tableName: "Localizable", source: source, developmentValue: "You must check the box to continue", comment: nil) }

      /// en-US translation: I agree to the terms of use and acknowledge the privacy policy.
      ///
      /// Key: contract::termOfUse
      ///
      /// Locales: en-US
      var contractTermOfUse: RswiftResources.StringResource { .init(key: "contract::termOfUse", tableName: "Localizable", source: source, developmentValue: "I agree to the terms of use and acknowledge the privacy policy.", comment: nil) }

      /// en-US translation: Review the changes here.
      ///
      /// Key: contract::touChanges
      ///
      /// Locales: en-US
      var contractTouChanges: RswiftResources.StringResource { .init(key: "contract::touChanges", tableName: "Localizable", source: source, developmentValue: "Review the changes here.", comment: nil) }

      /// en-US translation: terms of use
      ///
      /// Key: contract::touLinkablePart
      ///
      /// Locales: en-US
      var contractTouLinkablePart: RswiftResources.StringResource { .init(key: "contract::touLinkablePart", tableName: "Localizable", source: source, developmentValue: "terms of use", comment: nil) }

      /// en-US translation: Terms of use
      ///
      /// Key: contract::touTitle
      ///
      /// Locales: en-US
      var contractTouTitle: RswiftResources.StringResource { .init(key: "contract::touTitle", tableName: "Localizable", source: source, developmentValue: "Terms of use", comment: nil) }

      /// en-US translation: Agree to the updated terms of use and acknowledge the updated privacy policy by clicking Accept.
      ///
      /// Key: contract::updatedTou
      ///
      /// Locales: en-US
      var contractUpdatedTou: RswiftResources.StringResource { .init(key: "contract::updatedTou", tableName: "Localizable", source: source, developmentValue: "Agree to the updated terms of use and acknowledge the updated privacy policy by clicking Accept.", comment: nil) }

      /// en-US translation: If you have any questions, contact Support.
      ///
      /// Key: contract::updatedTouSupport
      ///
      /// Locales: en-US
      var contractUpdatedTouSupport: RswiftResources.StringResource { .init(key: "contract::updatedTouSupport", tableName: "Localizable", source: source, developmentValue: "If you have any questions, contact Support.", comment: nil) }

      /// en-US translation: We’ve updated our Terms & Conditions
      ///
      /// Key: contract::updatedTouTitle
      ///
      /// Locales: en-US
      var contractUpdatedTouTitle: RswiftResources.StringResource { .init(key: "contract::updatedTouTitle", tableName: "Localizable", source: source, developmentValue: "We’ve updated our\nTerms & Conditions", comment: nil) }

      /// en-US translation: MM/dd/YYYY HH:mmA
      ///
      /// Key: date::full
      ///
      /// Locales: en-US
      var dateFull: RswiftResources.StringResource { .init(key: "date::full", tableName: "Localizable", source: source, developmentValue: "MM/dd/YYYY HH:mmA", comment: nil) }

      /// en-US translation: MM/dd/yyyy | HH:mm
      ///
      /// Key: date::fullHourMinutes
      ///
      /// Locales: en-US
      var dateFullHourMinutes: RswiftResources.StringResource { .init(key: "date::fullHourMinutes", tableName: "Localizable", source: source, developmentValue: "MM/dd/yyyy | HH:mm", comment: nil) }

      /// en-US translation: MMMM YYYY
      ///
      /// Key: date::fullMonthYear
      ///
      /// Locales: en-US
      var dateFullMonthYear: RswiftResources.StringResource { .init(key: "date::fullMonthYear", tableName: "Localizable", source: source, developmentValue: "MMMM YYYY", comment: nil) }

      /// en-US translation: MM/dd/YY
      ///
      /// Key: date::short
      ///
      /// Locales: en-US
      var dateShort: RswiftResources.StringResource { .init(key: "date::short", tableName: "Localizable", source: source, developmentValue: "MM/dd/YY", comment: nil) }

      /// en-US translation: EE MM/dd/yy
      ///
      /// Key: date::shortDayName
      ///
      /// Locales: en-US
      var dateShortDayName: RswiftResources.StringResource { .init(key: "date::shortDayName", tableName: "Localizable", source: source, developmentValue: "EE MM/dd/yy", comment: nil) }

      /// en-US translation: MM/dd/yyyy hh:mm a (zzz)
      ///
      /// Key: date::shortHourTimeZone
      ///
      /// Locales: en-US
      var dateShortHourTimeZone: RswiftResources.StringResource { .init(key: "date::shortHourTimeZone", tableName: "Localizable", source: source, developmentValue: "MM/dd/yyyy hh:mm a (zzz)", comment: nil) }

      /// en-US translation: MM/yy
      ///
      /// Key: date::shortNoDay
      ///
      /// Locales: en-US
      var dateShortNoDay: RswiftResources.StringResource { .init(key: "date::shortNoDay", tableName: "Localizable", source: source, developmentValue: "MM/yy", comment: nil) }

      /// en-US translation: MM/dd
      ///
      /// Key: date::shortNoYear
      ///
      /// Locales: en-US
      var dateShortNoYear: RswiftResources.StringResource { .init(key: "date::shortNoYear", tableName: "Localizable", source: source, developmentValue: "MM/dd", comment: nil) }

      /// en-US translation: Dismiss
      ///
      /// Key: dimiss
      ///
      /// Locales: en-US
      var dimiss: RswiftResources.StringResource { .init(key: "dimiss", tableName: "Localizable", source: source, developmentValue: "Dismiss", comment: nil) }

      /// en-US translation: Done
      ///
      /// Key: done
      ///
      /// Locales: en-US
      var done: RswiftResources.StringResource { .init(key: "done", tableName: "Localizable", source: source, developmentValue: "Done", comment: nil) }

      /// en-US translation: Choose season
      ///
      /// Key: farm::chooseSeason
      ///
      /// Locales: en-US
      var farmChooseSeason: RswiftResources.StringResource { .init(key: "farm::chooseSeason", tableName: "Localizable", source: source, developmentValue: "Choose season", comment: nil) }

      /// en-US translation: farms selected
      ///
      /// Key: farm::farmSelected
      ///
      /// Locales: en-US
      var farmFarmSelected: RswiftResources.StringResource { .init(key: "farm::farmSelected", tableName: "Localizable", source: source, developmentValue: "farms selected", comment: nil) }

      /// en-US translation: All farms
      ///
      /// Key: farm:allFarms
      ///
      /// Locales: en-US
      var farmAllFarms: RswiftResources.StringResource { .init(key: "farm:allFarms", tableName: "Localizable", source: source, developmentValue: "All farms", comment: nil) }

      /// en-US translation: %d out of %d farms selected
      ///
      /// Key: farmFilter::farmSelected
      ///
      /// Locales: en-US
      var farmFilterFarmSelected: RswiftResources.StringResource2<Int, Int> { .init(key: "farmFilter::farmSelected", tableName: "Localizable", source: source, developmentValue: "%d out of %d farms selected", comment: nil) }

      /// en-US translation: Farm selection
      ///
      /// Key: farmFilter::farmSelection
      ///
      /// Locales: en-US
      var farmFilterFarmSelection: RswiftResources.StringResource { .init(key: "farmFilter::farmSelection", tableName: "Localizable", source: source, developmentValue: "Farm selection", comment: nil) }

      /// en-US translation: All ( %@ )
      ///
      /// Key: feed::allCount_IOS
      ///
      /// Locales: en-US
      var feedAllCount_IOS: RswiftResources.StringResource1<String> { .init(key: "feed::allCount_IOS", tableName: "Localizable", source: source, developmentValue: "All ( %@ )", comment: nil) }

      /// en-US translation: Reset filter to all farms
      ///
      /// Key: feed::empty::resetAllFarmFilter
      ///
      /// Locales: en-US
      var feedEmptyResetAllFarmFilter: RswiftResources.StringResource { .init(key: "feed::empty::resetAllFarmFilter", tableName: "Localizable", source: source, developmentValue: "Reset filter to all farms", comment: nil) }

      /// en-US translation: Something went wrong, please try again to load insights
      ///
      /// Key: feed::errorInsightsSubtitle
      ///
      /// Locales: en-US
      var feedErrorInsightsSubtitle: RswiftResources.StringResource { .init(key: "feed::errorInsightsSubtitle", tableName: "Localizable", source: source, developmentValue: "Something went wrong,\nplease try again to load insights", comment: nil) }

      /// en-US translation: Insights
      ///
      /// Key: feed::insights
      ///
      /// Locales: en-US
      var feedInsights: RswiftResources.StringResource { .init(key: "feed::insights", tableName: "Localizable", source: source, developmentValue: "Insights", comment: nil) }

      /// en-US translation: Loading Fields
      ///
      /// Key: feed::loadingFields
      ///
      /// Locales: en-US
      var feedLoadingFields: RswiftResources.StringResource { .init(key: "feed::loadingFields", tableName: "Localizable", source: source, developmentValue: "Loading Fields", comment: nil) }

      /// en-US translation: Loading insights
      ///
      /// Key: feed::loadingInsights
      ///
      /// Locales: en-US
      var feedLoadingInsights: RswiftResources.StringResource { .init(key: "feed::loadingInsights", tableName: "Localizable", source: source, developmentValue: "Loading insights", comment: nil) }

      /// en-US translation: No insights
      ///
      /// Key: feed::noInsights
      ///
      /// Locales: en-US
      var feedNoInsights: RswiftResources.StringResource { .init(key: "feed::noInsights", tableName: "Localizable", source: source, developmentValue: "No insights", comment: nil) }

      /// en-US translation: No unread insights
      ///
      /// Key: feed::noUnreadInsights
      ///
      /// Locales: en-US
      var feedNoUnreadInsights: RswiftResources.StringResource { .init(key: "feed::noUnreadInsights", tableName: "Localizable", source: source, developmentValue: "No unread insights", comment: nil) }

      /// en-US translation: Oops!
      ///
      /// Key: feed::oops
      ///
      /// Locales: en-US
      var feedOops: RswiftResources.StringResource { .init(key: "feed::oops", tableName: "Localizable", source: source, developmentValue: "Oops!", comment: nil) }

      /// en-US translation: Reload
      ///
      /// Key: feed::reload
      ///
      /// Locales: en-US
      var feedReload: RswiftResources.StringResource { .init(key: "feed::reload", tableName: "Localizable", source: source, developmentValue: "Reload", comment: nil) }

      /// en-US translation: Something went wrong, please try again to load insights
      ///
      /// Key: feed::somethingWrongTryReload
      ///
      /// Locales: en-US
      var feedSomethingWrongTryReload: RswiftResources.StringResource { .init(key: "feed::somethingWrongTryReload", tableName: "Localizable", source: source, developmentValue: "Something went wrong, please try again to load insights", comment: nil) }

      /// en-US translation: This week
      ///
      /// Key: feed::thisWeek
      ///
      /// Locales: en-US
      var feedThisWeek: RswiftResources.StringResource { .init(key: "feed::thisWeek", tableName: "Localizable", source: source, developmentValue: "This week", comment: nil) }

      /// en-US translation: Unread ( %@ )
      ///
      /// Key: feed::unreadCount_IOS
      ///
      /// Locales: en-US
      var feedUnreadCount_IOS: RswiftResources.StringResource1<String> { .init(key: "feed::unreadCount_IOS", tableName: "Localizable", source: source, developmentValue: "Unread ( %@ )", comment: nil) }

      /// en-US translation: We will notify you when new insights are detected.
      ///
      /// Key: feed::unreadEmptyStateSubtitle
      ///
      /// Locales: en-US
      var feedUnreadEmptyStateSubtitle: RswiftResources.StringResource { .init(key: "feed::unreadEmptyStateSubtitle", tableName: "Localizable", source: source, developmentValue: "We will notify you when new insights are detected.", comment: nil) }

      /// en-US translation: Filtered by unread
      ///
      /// Key: feed::unreadTitle
      ///
      /// Locales: en-US
      var feedUnreadTitle: RswiftResources.StringResource { .init(key: "feed::unreadTitle", tableName: "Localizable", source: source, developmentValue: "Filtered by unread", comment: nil) }

      /// en-US translation: Weed report
      ///
      /// Key: feed::weedInsightSubTitle
      ///
      /// Locales: en-US
      var feedWeedInsightSubTitle: RswiftResources.StringResource { .init(key: "feed::weedInsightSubTitle", tableName: "Localizable", source: source, developmentValue: "Weed report", comment: nil) }

      /// en-US translation: There are no insights to show
      ///
      /// Key: feed:empty::noInsightToShow
      ///
      /// Locales: en-US
      var feedEmptyNoInsightToShow: RswiftResources.StringResource { .init(key: "feed:empty::noInsightToShow", tableName: "Localizable", source: source, developmentValue: "There are no\ninsights to show", comment: nil) }

      /// en-US translation: Can't fix
      ///
      /// Key: feedbackReason::cant_fix
      ///
      /// Locales: en-US
      var feedbackReasonCant_fix: RswiftResources.StringResource { .init(key: "feedbackReason::cant_fix", tableName: "Localizable", source: source, developmentValue: "Can't fix", comment: nil) }

      /// en-US translation: Let us know how we can do better
      ///
      /// Key: feedbackReason::howWeCanDoBetter
      ///
      /// Locales: en-US
      var feedbackReasonHowWeCanDoBetter: RswiftResources.StringResource { .init(key: "feedbackReason::howWeCanDoBetter", tableName: "Localizable", source: source, developmentValue: "Let us know how we can do better", comment: nil) }

      /// en-US translation: Too late
      ///
      /// Key: feedbackReason::late
      ///
      /// Locales: en-US
      var feedbackReasonLate: RswiftResources.StringResource { .init(key: "feedbackReason::late", tableName: "Localizable", source: source, developmentValue: "Too late", comment: nil) }

      /// en-US translation: Missing information
      ///
      /// Key: feedbackReason::missing_info
      ///
      /// Locales: en-US
      var feedbackReasonMissing_info: RswiftResources.StringResource { .init(key: "feedbackReason::missing_info", tableName: "Localizable", source: source, developmentValue: "Missing information", comment: nil) }

      /// en-US translation: Issue not found in field
      ///
      /// Key: feedbackReason::not_found
      ///
      /// Locales: en-US
      var feedbackReasonNot_found: RswiftResources.StringResource { .init(key: "feedbackReason::not_found", tableName: "Localizable", source: source, developmentValue: "Issue not found in field", comment: nil) }

      /// en-US translation: Other
      ///
      /// Key: feedbackReason::other
      ///
      /// Locales: en-US
      var feedbackReasonOther: RswiftResources.StringResource { .init(key: "feedbackReason::other", tableName: "Localizable", source: source, developmentValue: "Other", comment: nil) }

      /// en-US translation: Cancel
      ///
      /// Key: feedbackWalkthrough::negative
      ///
      /// Locales: en-US
      var feedbackWalkthroughNegative: RswiftResources.StringResource { .init(key: "feedbackWalkthrough::negative", tableName: "Localizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en-US translation: OK
      ///
      /// Key: feedbackWalkthrough::positive
      ///
      /// Locales: en-US
      var feedbackWalkthroughPositive: RswiftResources.StringResource { .init(key: "feedbackWalkthrough::positive", tableName: "Localizable", source: source, developmentValue: "OK", comment: nil) }

      /// en-US translation: What did you think  of this insight?
      ///
      /// Key: feedbackWalkthrough::subtitle
      ///
      /// Locales: en-US
      var feedbackWalkthroughSubtitle: RswiftResources.StringResource { .init(key: "feedbackWalkthrough::subtitle", tableName: "Localizable", source: source, developmentValue: "What did you think\n of this insight?", comment: nil) }

      /// en-US translation: Image unavailable
      ///
      /// Key: field::ImageUnavailable
      ///
      /// Locales: en-US
      var fieldImageUnavailable: RswiftResources.StringResource { .init(key: "field::ImageUnavailable", tableName: "Localizable", source: source, developmentValue: "Image\nunavailable", comment: nil) }

      /// en-US translation: Analyze
      ///
      /// Key: field::analyze
      ///
      /// Locales: en-US
      var fieldAnalyze: RswiftResources.StringResource { .init(key: "field::analyze", tableName: "Localizable", source: source, developmentValue: "Analyze", comment: nil) }

      /// en-US translation: Analyze field
      ///
      /// Key: field::analyzeField
      ///
      /// Locales: en-US
      var fieldAnalyzeField: RswiftResources.StringResource { .init(key: "field::analyzeField", tableName: "Localizable", source: source, developmentValue: "Analyze field", comment: nil) }

      /// en-US translation:  
      ///
      /// Key: field::emptyText
      ///
      /// Locales: en-US
      var fieldEmptyText: RswiftResources.StringResource { .init(key: "field::emptyText", tableName: "Localizable", source: source, developmentValue: " ", comment: nil) }

      /// en-US translation: Fields (%d)
      ///
      /// Key: field::fieldsCount
      ///
      /// Locales: en-US
      var fieldFieldsCount: RswiftResources.StringResource1<Int> { .init(key: "field::fieldsCount", tableName: "Localizable", source: source, developmentValue: "Fields (%d)", comment: nil) }

      /// en-US translation: Insights (%d)
      ///
      /// Key: field::insightCount
      ///
      /// Locales: en-US
      var fieldInsightCount: RswiftResources.StringResource1<Int> { .init(key: "field::insightCount", tableName: "Localizable", source: source, developmentValue: "Insights (%d)", comment: nil) }

      /// en-US translation: Irrigation insights
      ///
      /// Key: field::irrigationInsights
      ///
      /// Locales: en-US
      var fieldIrrigationInsights: RswiftResources.StringResource { .init(key: "field::irrigationInsights", tableName: "Localizable", source: source, developmentValue: "Irrigation insights", comment: nil) }

      /// en-US translation: Last image: %@
      ///
      /// Key: field::lastImage_IOS
      ///
      /// Locales: en-US
      var fieldLastImage_IOS: RswiftResources.StringResource1<String> { .init(key: "field::lastImage_IOS", tableName: "Localizable", source: source, developmentValue: "Last image: %@", comment: nil) }

      /// en-US translation: Latest satellite imagery:
      ///
      /// Key: field::latestImagery
      ///
      /// Locales: en-US
      var fieldLatestImagery: RswiftResources.StringResource { .init(key: "field::latestImagery", tableName: "Localizable", source: source, developmentValue: "Latest satellite imagery:", comment: nil) }

      /// en-US translation: No data is available yet for this field, but stay tuned! You will be notified soon.
      ///
      /// Key: field::noDataAvailableForThisField
      ///
      /// Locales: en-US
      var fieldNoDataAvailableForThisField: RswiftResources.StringResource { .init(key: "field::noDataAvailableForThisField", tableName: "Localizable", source: source, developmentValue: "No data is available yet for this field,\nbut stay tuned! You will be notified soon.", comment: nil) }

      /// en-US translation: No recent updates
      ///
      /// Key: field::noRecentUpdates
      ///
      /// Locales: en-US
      var fieldNoRecentUpdates: RswiftResources.StringResource { .init(key: "field::noRecentUpdates", tableName: "Localizable", source: source, developmentValue: "No recent updates", comment: nil) }

      /// en-US translation: Request a specific report outside the regular schedule service
      ///
      /// Key: field::requestReportDescription
      ///
      /// Locales: en-US
      var fieldRequestReportDescription: RswiftResources.StringResource { .init(key: "field::requestReportDescription", tableName: "Localizable", source: source, developmentValue: "Request a specific report outside the regular schedule service", comment: nil) }

      /// en-US translation: To complete your report request, select continue below. You will be redirected to a short form.
      ///
      /// Key: field::requestReportDialogDescription
      ///
      /// Locales: en-US
      var fieldRequestReportDialogDescription: RswiftResources.StringResource { .init(key: "field::requestReportDialogDescription", tableName: "Localizable", source: source, developmentValue: "To complete your report request, select continue below. You will be redirected to a short form.", comment: nil) }

      /// en-US translation: Request a report
      ///
      /// Key: field::requestReportTitle
      ///
      /// Locales: en-US
      var fieldRequestReportTitle: RswiftResources.StringResource { .init(key: "field::requestReportTitle", tableName: "Localizable", source: source, developmentValue: "Request a report", comment: nil) }

      /// en-US translation: Satellite Imagery
      ///
      /// Key: field::satelliteImagery
      ///
      /// Locales: en-US
      var fieldSatelliteImagery: RswiftResources.StringResource { .init(key: "field::satelliteImagery", tableName: "Localizable", source: source, developmentValue: "Satellite Imagery", comment: nil) }

      /// en-US translation: See all imagery
      ///
      /// Key: field::seeAllImagery
      ///
      /// Locales: en-US
      var fieldSeeAllImagery: RswiftResources.StringResource { .init(key: "field::seeAllImagery", tableName: "Localizable", source: source, developmentValue: "See all imagery", comment: nil) }

      /// en-US translation: See all irrigation insights
      ///
      /// Key: field::seeAllIrrigationInsights
      ///
      /// Locales: en-US
      var fieldSeeAllIrrigationInsights: RswiftResources.StringResource { .init(key: "field::seeAllIrrigationInsights", tableName: "Localizable", source: source, developmentValue: "See all irrigation insights", comment: nil) }

      /// en-US translation: Updated satellite imagery
      ///
      /// Key: field::updateSatelliteImagery
      ///
      /// Locales: en-US
      var fieldUpdateSatelliteImagery: RswiftResources.StringResource { .init(key: "field::updateSatelliteImagery", tableName: "Localizable", source: source, developmentValue: "Updated satellite imagery", comment: nil) }

      /// en-US translation: You can view the images that have  been taken for the field by clicking the  Analyze Field button
      ///
      /// Key: field::viewImagesOnAnalyze
      ///
      /// Locales: en-US
      var fieldViewImagesOnAnalyze: RswiftResources.StringResource { .init(key: "field::viewImagesOnAnalyze", tableName: "Localizable", source: source, developmentValue: "You can view the images that have\n been taken for the field by clicking the\n Analyze Field button", comment: nil) }

      /// en-US translation: A-Z
      ///
      /// Key: fieldSorting::aToZ
      ///
      /// Locales: en-US
      var fieldSortingAToZ: RswiftResources.StringResource { .init(key: "fieldSorting::aToZ", tableName: "Localizable", source: source, developmentValue: "A-Z", comment: nil) }

      /// en-US translation: Latest
      ///
      /// Key: fieldSorting::latest
      ///
      /// Locales: en-US
      var fieldSortingLatest: RswiftResources.StringResource { .init(key: "fieldSorting::latest", tableName: "Localizable", source: source, developmentValue: "Latest", comment: nil) }

      /// en-US translation: Save
      ///
      /// Key: fieldSorting::save
      ///
      /// Locales: en-US
      var fieldSortingSave: RswiftResources.StringResource { .init(key: "fieldSorting::save", tableName: "Localizable", source: source, developmentValue: "Save", comment: nil) }

      /// en-US translation: Sort by
      ///
      /// Key: fieldSorting::sortBy
      ///
      /// Locales: en-US
      var fieldSortingSortBy: RswiftResources.StringResource { .init(key: "fieldSorting::sortBy", tableName: "Localizable", source: source, developmentValue: "Sort by", comment: nil) }

      /// en-US translation: Unread
      ///
      /// Key: fieldSorting::unread
      ///
      /// Locales: en-US
      var fieldSortingUnread: RswiftResources.StringResource { .init(key: "fieldSorting::unread", tableName: "Localizable", source: source, developmentValue: "Unread", comment: nil) }

      /// en-US translation: My Fields
      ///
      /// Key: fields::myFileds
      ///
      /// Locales: en-US
      var fieldsMyFileds: RswiftResources.StringResource { .init(key: "fields::myFileds", tableName: "Localizable", source: source, developmentValue: "My Fields", comment: nil) }

      /// en-US translation: Failed to load image
      ///
      /// Key: gallery::imageLoadingError
      ///
      /// Locales: en-US
      var galleryImageLoadingError: RswiftResources.StringResource { .init(key: "gallery::imageLoadingError", tableName: "Localizable", source: source, developmentValue: "Failed to load image", comment: nil) }

      /// en-US translation: Got it
      ///
      /// Key: gotItButton
      ///
      /// Locales: en-US
      var gotItButton: RswiftResources.StringResource { .init(key: "gotItButton", tableName: "Localizable", source: source, developmentValue: "Got it", comment: nil) }

      /// en-US translation: Click on the Show all to review previous ones
      ///
      /// Key: highlights::clickOnShowAll
      ///
      /// Locales: en-US
      var highlightsClickOnShowAll: RswiftResources.StringResource { .init(key: "highlights::clickOnShowAll", tableName: "Localizable", source: source, developmentValue: "Click on the Show all to review previous ones", comment: nil) }

      /// en-US translation: Highlights
      ///
      /// Key: highlights::highlights
      ///
      /// Locales: en-US
      var highlightsHighlights: RswiftResources.StringResource { .init(key: "highlights::highlights", tableName: "Localizable", source: source, developmentValue: "Highlights", comment: nil) }

      /// en-US translation: Irrigation highlight
      ///
      /// Key: highlights::irrigationHighlights
      ///
      /// Locales: en-US
      var highlightsIrrigationHighlights: RswiftResources.StringResource { .init(key: "highlights::irrigationHighlights", tableName: "Localizable", source: source, developmentValue: "Irrigation highlight", comment: nil) }

      /// en-US translation: No recent highlights
      ///
      /// Key: highlights::noRescentHighlights
      ///
      /// Locales: en-US
      var highlightsNoRescentHighlights: RswiftResources.StringResource { .init(key: "highlights::noRescentHighlights", tableName: "Localizable", source: source, developmentValue: "No recent highlights", comment: nil) }

      /// en-US translation: Recent highlights
      ///
      /// Key: highlights::recentHighlights
      ///
      /// Locales: en-US
      var highlightsRecentHighlights: RswiftResources.StringResource { .init(key: "highlights::recentHighlights", tableName: "Localizable", source: source, developmentValue: "Recent highlights", comment: nil) }

      /// en-US translation: Show all
      ///
      /// Key: highlights::showAll
      ///
      /// Locales: en-US
      var highlightsShowAll: RswiftResources.StringResource { .init(key: "highlights::showAll", tableName: "Localizable", source: source, developmentValue: "Show all", comment: nil) }

      /// en-US translation: A calculated index (based on Infra-Red), which is used to monitor crop health and vegetation level.
      ///
      /// Key: imageLayerData::ndvi::info2Lines
      ///
      /// Locales: en-US
      var imageLayerDataNdviInfo2Lines: RswiftResources.StringResource { .init(key: "imageLayerData::ndvi::info2Lines", tableName: "Localizable", source: source, developmentValue: "A calculated index (based on Infra-Red), which is used to monitor crop health and vegetation level.", comment: nil) }

      /// en-US translation: Dense veg.
      ///
      /// Key: imageLayerData::ndvi::legend::end
      ///
      /// Locales: en-US
      var imageLayerDataNdviLegendEnd: RswiftResources.StringResource { .init(key: "imageLayerData::ndvi::legend::end", tableName: "Localizable", source: source, developmentValue: "Dense veg.", comment: nil) }

      /// en-US translation: Sparse veg.
      ///
      /// Key: imageLayerData::ndvi::legend::start
      ///
      /// Locales: en-US
      var imageLayerDataNdviLegendStart: RswiftResources.StringResource { .init(key: "imageLayerData::ndvi::legend::start", tableName: "Localizable", source: source, developmentValue: "Sparse veg.", comment: nil) }

      /// en-US translation: NDVI
      ///
      /// Key: imageLayerData::ndvi::name
      ///
      /// Locales: en-US
      var imageLayerDataNdviName: RswiftResources.StringResource { .init(key: "imageLayerData::ndvi::name", tableName: "Localizable", source: source, developmentValue: "NDVI", comment: nil) }

      /// en-US translation: Natural colors image, similar to how the human eye would see the field from an airplane.
      ///
      /// Key: imageLayerData::rgb::info2Lines
      ///
      /// Locales: en-US
      var imageLayerDataRgbInfo2Lines: RswiftResources.StringResource { .init(key: "imageLayerData::rgb::info2Lines", tableName: "Localizable", source: source, developmentValue: "Natural colors image, similar to how the human eye would see the field from an airplane.", comment: nil) }

      /// en-US translation: True Color
      ///
      /// Key: imageLayerData::rgb::name
      ///
      /// Locales: en-US
      var imageLayerDataRgbName: RswiftResources.StringResource { .init(key: "imageLayerData::rgb::name", tableName: "Localizable", source: source, developmentValue: "True Color", comment: nil) }

      /// en-US translation: Thanks! Got it
      ///
      /// Key: imageLayerData::thanksGotIt
      ///
      /// Locales: en-US
      var imageLayerDataThanksGotIt: RswiftResources.StringResource { .init(key: "imageLayerData::thanksGotIt", tableName: "Localizable", source: source, developmentValue: "Thanks! Got it", comment: nil) }

      /// en-US translation: Shows differences in plant temperature and water transpiration.
      ///
      /// Key: imageLayerData::thermal::info2Lines
      ///
      /// Locales: en-US
      var imageLayerDataThermalInfo2Lines: RswiftResources.StringResource { .init(key: "imageLayerData::thermal::info2Lines", tableName: "Localizable", source: source, developmentValue: "Shows differences in plant temperature and water transpiration.", comment: nil) }

      /// en-US translation: Highest Temp.
      ///
      /// Key: imageLayerData::thermal::legend::end
      ///
      /// Locales: en-US
      var imageLayerDataThermalLegendEnd: RswiftResources.StringResource { .init(key: "imageLayerData::thermal::legend::end", tableName: "Localizable", source: source, developmentValue: "Highest Temp.", comment: nil) }

      /// en-US translation: Lowest Temp.
      ///
      /// Key: imageLayerData::thermal::legend::start
      ///
      /// Locales: en-US
      var imageLayerDataThermalLegendStart: RswiftResources.StringResource { .init(key: "imageLayerData::thermal::legend::start", tableName: "Localizable", source: source, developmentValue: "Lowest Temp.", comment: nil) }

      /// en-US translation: Thermal
      ///
      /// Key: imageLayerData::thermal::name
      ///
      /// Locales: en-US
      var imageLayerDataThermalName: RswiftResources.StringResource { .init(key: "imageLayerData::thermal::name", tableName: "Localizable", source: source, developmentValue: "Thermal", comment: nil) }

      /// en-US translation: New Imagery
      ///
      /// Key: imagery::newImagery
      ///
      /// Locales: en-US
      var imageryNewImagery: RswiftResources.StringResource { .init(key: "imagery::newImagery", tableName: "Localizable", source: source, developmentValue: "New Imagery", comment: nil) }

      /// en-US translation: New Imagery
      ///
      /// Key: imagery::newImageryReceived
      ///
      /// Locales: en-US
      var imageryNewImageryReceived: RswiftResources.StringResource { .init(key: "imagery::newImageryReceived", tableName: "Localizable", source: source, developmentValue: "New Imagery", comment: nil) }

      /// en-US translation: Impersonation as:
      ///
      /// Key: impersonation::badge
      ///
      /// Locales: en-US
      var impersonationBadge: RswiftResources.StringResource { .init(key: "impersonation::badge", tableName: "Localizable", source: source, developmentValue: "Impersonation as:", comment: nil) }

      /// en-US translation: %@ Acres
      ///
      /// Key: insight::acres_IOS
      ///
      /// Locales: en-US
      var insightAcres_IOS: RswiftResources.StringResource1<String> { .init(key: "insight::acres_IOS", tableName: "Localizable", source: source, developmentValue: "%@ Acres", comment: nil) }

      /// en-US translation: Affected
      ///
      /// Key: insight::affected
      ///
      /// Locales: en-US
      var insightAffected: RswiftResources.StringResource { .init(key: "insight::affected", tableName: "Localizable", source: source, developmentValue: "Affected", comment: nil) }

      /// en-US translation: Affected area
      ///
      /// Key: insight::affectedArea
      ///
      /// Locales: en-US
      var insightAffectedArea: RswiftResources.StringResource { .init(key: "insight::affectedArea", tableName: "Localizable", source: source, developmentValue: "Affected area", comment: nil) }

      /// en-US translation: Analyze insight
      ///
      /// Key: insight::analyzeInsight
      ///
      /// Locales: en-US
      var insightAnalyzeInsight: RswiftResources.StringResource { .init(key: "insight::analyzeInsight", tableName: "Localizable", source: source, developmentValue: "Analyze insight", comment: nil) }

      /// en-US translation: Avg. stand count
      ///
      /// Key: insight::avgStandCount
      ///
      /// Locales: en-US
      var insightAvgStandCount: RswiftResources.StringResource { .init(key: "insight::avgStandCount", tableName: "Localizable", source: source, developmentValue: "Avg. stand count", comment: nil) }

      /// en-US translation: This image may be affected by cloud cover
      ///
      /// Key: insight::cloudTipText
      ///
      /// Locales: en-US
      var insightCloudTipText: RswiftResources.StringResource { .init(key: "insight::cloudTipText", tableName: "Localizable", source: source, developmentValue: "This image may be affected by cloud cover", comment: nil) }

      /// en-US translation: Cloudy
      ///
      /// Key: insight::cloudy
      ///
      /// Locales: en-US
      var insightCloudy: RswiftResources.StringResource { .init(key: "insight::cloudy", tableName: "Localizable", source: source, developmentValue: "Cloudy", comment: nil) }

      /// en-US translation: Cycle completion %@
      ///
      /// Key: insight::cycleCompletion_IOS
      ///
      /// Locales: en-US
      var insightCycleCompletion_IOS: RswiftResources.StringResource1<String> { .init(key: "insight::cycleCompletion_IOS", tableName: "Localizable", source: source, developmentValue: "Cycle completion %@", comment: nil) }

      /// en-US translation: Description
      ///
      /// Key: insight::description
      ///
      /// Locales: en-US
      var insightDescription: RswiftResources.StringResource { .init(key: "insight::description", tableName: "Localizable", source: source, developmentValue: "Description", comment: nil) }

      /// en-US translation: Edit
      ///
      /// Key: insight::edit
      ///
      /// Locales: en-US
      var insightEdit: RswiftResources.StringResource { .init(key: "insight::edit", tableName: "Localizable", source: source, developmentValue: "Edit", comment: nil) }

      /// en-US translation: View sample images
      ///
      /// Key: insight::emptyLocationOverviewCardButtonLabel
      ///
      /// Locales: en-US
      var insightEmptyLocationOverviewCardButtonLabel: RswiftResources.StringResource { .init(key: "insight::emptyLocationOverviewCardButtonLabel", tableName: "Localizable", source: source, developmentValue: "View sample images", comment: nil) }

      /// en-US translation: No detections found in scan
      ///
      /// Key: insight::emptyLocationOverviewCardSummeryLabel
      ///
      /// Locales: en-US
      var insightEmptyLocationOverviewCardSummeryLabel: RswiftResources.StringResource { .init(key: "insight::emptyLocationOverviewCardSummeryLabel", tableName: "Localizable", source: source, developmentValue: "No detections found in scan", comment: nil) }

      /// en-US translation: Scan overview
      ///
      /// Key: insight::emptyLocationOverviewCardTitle
      ///
      /// Locales: en-US
      var insightEmptyLocationOverviewCardTitle: RswiftResources.StringResource { .init(key: "insight::emptyLocationOverviewCardTitle", tableName: "Localizable", source: source, developmentValue: "Scan overview", comment: nil) }

      /// en-US translation: Sample images
      ///
      /// Key: insight::emptyLocationSingleIssueLabel
      ///
      /// Locales: en-US
      var insightEmptyLocationSingleIssueLabel: RswiftResources.StringResource { .init(key: "insight::emptyLocationSingleIssueLabel", tableName: "Localizable", source: source, developmentValue: "Sample images", comment: nil) }

      /// en-US translation: Field
      ///
      /// Key: insight::field
      ///
      /// Locales: en-US
      var insightField: RswiftResources.StringResource { .init(key: "insight::field", tableName: "Localizable", source: source, developmentValue: "Field", comment: nil) }

      /// en-US translation: Finding Samples
      ///
      /// Key: insight::findingSamples
      ///
      /// Locales: en-US
      var insightFindingSamples: RswiftResources.StringResource { .init(key: "insight::findingSamples", tableName: "Localizable", source: source, developmentValue: "Finding Samples", comment: nil) }

      /// en-US translation: first detected
      ///
      /// Key: insight::firstDetected
      ///
      /// Locales: en-US
      var insightFirstDetected: RswiftResources.StringResource { .init(key: "insight::firstDetected", tableName: "Localizable", source: source, developmentValue: "first detected", comment: nil) }

      /// en-US translation: First Detection
      ///
      /// Key: insight::firstDetection
      ///
      /// Locales: en-US
      var insightFirstDetection: RswiftResources.StringResource { .init(key: "insight::firstDetection", tableName: "Localizable", source: source, developmentValue: "First Detection", comment: nil) }

      /// en-US translation: First detection
      ///
      /// Key: insight::firstDetectionLowerCase
      ///
      /// Locales: en-US
      var insightFirstDetectionLowerCase: RswiftResources.StringResource { .init(key: "insight::firstDetectionLowerCase", tableName: "Localizable", source: source, developmentValue: "First detection", comment: nil) }

      /// en-US translation: Full report ETA
      ///
      /// Key: insight::fullReportETA
      ///
      /// Locales: en-US
      var insightFullReportETA: RswiftResources.StringResource { .init(key: "insight::fullReportETA", tableName: "Localizable", source: source, developmentValue: "Full report ETA", comment: nil) }

      /// en-US translation: Based on goal stand count of
      ///
      /// Key: insight::goalStandCount::text
      ///
      /// Locales: en-US
      var insightGoalStandCountText: RswiftResources.StringResource { .init(key: "insight::goalStandCount::text", tableName: "Localizable", source: source, developmentValue: "Based on goal stand count of", comment: nil) }

      /// en-US translation: Help us improve!
      ///
      /// Key: insight::helpImprove
      ///
      /// Locales: en-US
      var insightHelpImprove: RswiftResources.StringResource { .init(key: "insight::helpImprove", tableName: "Localizable", source: source, developmentValue: "Help us improve!", comment: nil) }

      /// en-US translation: Image Gallery
      ///
      /// Key: insight::imageGallery
      ///
      /// Locales: en-US
      var insightImageGallery: RswiftResources.StringResource { .init(key: "insight::imageGallery", tableName: "Localizable", source: source, developmentValue: "Image Gallery", comment: nil) }

      /// en-US translation: of scan
      ///
      /// Key: insight::imageGallery::ofScan
      ///
      /// Locales: en-US
      var insightImageGalleryOfScan: RswiftResources.StringResource { .init(key: "insight::imageGallery::ofScan", tableName: "Localizable", source: source, developmentValue: "of scan", comment: nil) }

      /// en-US translation: Image taken
      ///
      /// Key: insight::imageTaken
      ///
      /// Locales: en-US
      var insightImageTaken: RswiftResources.StringResource { .init(key: "insight::imageTaken", tableName: "Localizable", source: source, developmentValue: "Image taken", comment: nil) }

      /// en-US translation: Mark as unread
      ///
      /// Key: insight::markUnread
      ///
      /// Locales: en-US
      var insightMarkUnread: RswiftResources.StringResource { .init(key: "insight::markUnread", tableName: "Localizable", source: source, developmentValue: "Mark as unread", comment: nil) }

      /// en-US translation: Navigate to location
      ///
      /// Key: insight::navigateToLocation
      ///
      /// Locales: en-US
      var insightNavigateToLocation: RswiftResources.StringResource { .init(key: "insight::navigateToLocation", tableName: "Localizable", source: source, developmentValue: "Navigate to location", comment: nil) }

      /// en-US translation: This button allows navigation to the image location
      ///
      /// Key: insight::navigationToImageLocation
      ///
      /// Locales: en-US
      var insightNavigationToImageLocation: RswiftResources.StringResource { .init(key: "insight::navigationToImageLocation", tableName: "Localizable", source: source, developmentValue: "This button allows navigation to the image location", comment: nil) }

      /// en-US translation: Drag to see additional information and actions
      ///
      /// Key: insight::openCardTooltip
      ///
      /// Locales: en-US
      var insightOpenCardTooltip: RswiftResources.StringResource { .init(key: "insight::openCardTooltip", tableName: "Localizable", source: source, developmentValue: "Drag to see additional information and actions", comment: nil) }

      /// en-US translation: plants/%@
      ///
      /// Key: insight::plantsPerUnit_IOS
      ///
      /// Locales: en-US
      var insightPlantsPerUnit_IOS: RswiftResources.StringResource1<String> { .init(key: "insight::plantsPerUnit_IOS", tableName: "Localizable", source: source, developmentValue: "plants/%@", comment: nil) }

      /// en-US translation: Report overview
      ///
      /// Key: insight::reportOverview
      ///
      /// Locales: en-US
      var insightReportOverview: RswiftResources.StringResource { .init(key: "insight::reportOverview", tableName: "Localizable", source: source, developmentValue: "Report overview", comment: nil) }

      /// en-US translation: Request a Shapefile (NEW)
      ///
      /// Key: insight::requestAShapeFile
      ///
      /// Locales: en-US
      var insightRequestAShapeFile: RswiftResources.StringResource { .init(key: "insight::requestAShapeFile", tableName: "Localizable", source: source, developmentValue: "Request a Shapefile (NEW)", comment: nil) }

      /// en-US translation: An Insight was detected on %@ in field  %@ -  %@.  %@
      ///
      /// Key: insight::shareInsight_IOS
      ///
      /// Locales: en-US
      var insightShareInsight_IOS: RswiftResources.StringResource4<String, String, String, String> { .init(key: "insight::shareInsight_IOS", tableName: "Localizable", source: source, developmentValue: "An Insight was detected on %@ in field  %@ -  %@. \n%@", comment: nil) }

      /// en-US translation: An Insight %@ from %@ for field %@:  %@
      ///
      /// Key: insight::shareLocationInsight_IOS
      ///
      /// Locales: en-US
      var insightShareLocationInsight_IOS: RswiftResources.StringResource4<String, String, String, String> { .init(key: "insight::shareLocationInsight_IOS", tableName: "Localizable", source: source, developmentValue: "An Insight %@ from %@ for field %@: \n%@", comment: nil) }

      /// en-US translation: Share Report
      ///
      /// Key: insight::shareReport
      ///
      /// Locales: en-US
      var insightShareReport: RswiftResources.StringResource { .init(key: "insight::shareReport", tableName: "Localizable", source: source, developmentValue: "Share Report", comment: nil) }

      /// en-US translation: To complete your Shapefile request, select continue below. You will be redirected to a short form.
      ///
      /// Key: insight::shareSapeFileDescription
      ///
      /// Locales: en-US
      var insightShareSapeFileDescription: RswiftResources.StringResource { .init(key: "insight::shareSapeFileDescription", tableName: "Localizable", source: source, developmentValue: "To complete your Shapefile request, select continue below. You will be redirected to a short form.", comment: nil) }

      /// en-US translation: Take action
      ///
      /// Key: insight::takeAction
      ///
      /// Locales: en-US
      var insightTakeAction: RswiftResources.StringResource { .init(key: "insight::takeAction", tableName: "Localizable", source: source, developmentValue: "Take action", comment: nil) }

      /// en-US translation: Thanks for your feedback!
      ///
      /// Key: insight::thanksFeedback
      ///
      /// Locales: en-US
      var insightThanksFeedback: RswiftResources.StringResource { .init(key: "insight::thanksFeedback", tableName: "Localizable", source: source, developmentValue: "Thanks for your feedback!", comment: nil) }

      /// en-US translation: Was this insight useful?
      ///
      /// Key: insight::wasUseful
      ///
      /// Locales: en-US
      var insightWasUseful: RswiftResources.StringResource { .init(key: "insight::wasUseful", tableName: "Localizable", source: source, developmentValue: "Was this insight useful?", comment: nil) }

      /// en-US translation: Click on the card to show sample imagery of each detection
      ///
      /// Key: insight::welcome::clickOnCardShowSampleImagery
      ///
      /// Locales: en-US
      var insightWelcomeClickOnCardShowSampleImagery: RswiftResources.StringResource { .init(key: "insight::welcome::clickOnCardShowSampleImagery", tableName: "Localizable", source: source, developmentValue: "Click on the card to show sample imagery of each detection", comment: nil) }

      /// en-US translation: Select image to view it in full screen
      ///
      /// Key: insight::welcome::imageGalleryTooltip::selectImageToViewtFullScreen
      ///
      /// Locales: en-US
      var insightWelcomeImageGalleryTooltipSelectImageToViewtFullScreen: RswiftResources.StringResource { .init(key: "insight::welcome::imageGalleryTooltip::selectImageToViewtFullScreen", tableName: "Localizable", source: source, developmentValue: "Select image to view it in full screen", comment: nil) }

      /// en-US translation: Report overview shows the % of imagery taken and issues detected
      ///
      /// Key: insight::welcome::reportOverviewShows
      ///
      /// Locales: en-US
      var insightWelcomeReportOverviewShows: RswiftResources.StringResource { .init(key: "insight::welcome::reportOverviewShows", tableName: "Localizable", source: source, developmentValue: "Report overview shows the % of imagery taken and issues detected", comment: nil) }

      /// en-US translation: Scroll between cards to explore each detection
      ///
      /// Key: insight::welcome::scrollBetweenCards
      ///
      /// Locales: en-US
      var insightWelcomeScrollBetweenCards: RswiftResources.StringResource { .init(key: "insight::welcome::scrollBetweenCards", tableName: "Localizable", source: source, developmentValue: "Scroll between cards to explore each detection", comment: nil) }

      /// en-US translation: Why was this insight not useful?
      ///
      /// Key: insight::whyNotUseful
      ///
      /// Locales: en-US
      var insightWhyNotUseful: RswiftResources.StringResource { .init(key: "insight::whyNotUseful", tableName: "Localizable", source: source, developmentValue: "Why was this insight not useful?", comment: nil) }

      /// en-US translation: Locations with findings
      ///
      /// Key: insight:locationWithFindings
      ///
      /// Locales: en-US
      var insightLocationWithFindings: RswiftResources.StringResource { .init(key: "insight:locationWithFindings", tableName: "Localizable", source: source, developmentValue: "Locations with findings", comment: nil) }

      /// en-US translation: Pinch to zoom
      ///
      /// Key: insight:pinchToZoom
      ///
      /// Locales: en-US
      var insightPinchToZoom: RswiftResources.StringResource { .init(key: "insight:pinchToZoom", tableName: "Localizable", source: source, developmentValue: "Pinch to zoom", comment: nil) }

      /// en-US translation: Choose your language
      ///
      /// Key: language::chooseYourLanguage
      ///
      /// Locales: en-US
      var languageChooseYourLanguage: RswiftResources.StringResource { .init(key: "language::chooseYourLanguage", tableName: "Localizable", source: source, developmentValue: "Choose your language", comment: nil) }

      /// en-US translation: Language
      ///
      /// Key: language::language
      ///
      /// Locales: en-US
      var languageLanguage: RswiftResources.StringResource { .init(key: "language::language", tableName: "Localizable", source: source, developmentValue: "Language", comment: nil) }

      /// en-US translation: Learn more
      ///
      /// Key: learnMore
      ///
      /// Locales: en-US
      var learnMore: RswiftResources.StringResource { .init(key: "learnMore", tableName: "Localizable", source: source, developmentValue: "Learn more", comment: nil) }

      /// en-US translation: Loading...
      ///
      /// Key: loading
      ///
      /// Locales: en-US
      var loading: RswiftResources.StringResource { .init(key: "loading", tableName: "Localizable", source: source, developmentValue: "Loading...", comment: nil) }

      /// en-US translation: Check your SMS messages. We’ve sent the code to %@
      ///
      /// Key: login::codeScreenInfo_IOS
      ///
      /// Locales: en-US
      var loginCodeScreenInfo_IOS: RswiftResources.StringResource1<String> { .init(key: "login::codeScreenInfo_IOS", tableName: "Localizable", source: source, developmentValue: "Check your SMS messages.\nWe’ve sent the code to %@", comment: nil) }

      /// en-US translation: contact support
      ///
      /// Key: login::contactSupport
      ///
      /// Locales: en-US
      var loginContactSupport: RswiftResources.StringResource { .init(key: "login::contactSupport", tableName: "Localizable", source: source, developmentValue: "contact support", comment: nil) }

      /// en-US translation: Enter code
      ///
      /// Key: login::enterCode
      ///
      /// Locales: en-US
      var loginEnterCode: RswiftResources.StringResource { .init(key: "login::enterCode", tableName: "Localizable", source: source, developmentValue: "Enter code", comment: nil) }

      /// en-US translation: Enter your phone number
      ///
      /// Key: login::enterPhone
      ///
      /// Locales: en-US
      var loginEnterPhone: RswiftResources.StringResource { .init(key: "login::enterPhone", tableName: "Localizable", source: source, developmentValue: "Enter your phone number", comment: nil) }

      /// en-US translation: impersonate user
      ///
      /// Key: login::impersonationButton
      ///
      /// Locales: en-US
      var loginImpersonationButton: RswiftResources.StringResource { .init(key: "login::impersonationButton", tableName: "Localizable", source: source, developmentValue: "impersonate user", comment: nil) }

      /// en-US translation: Impersonation allows you to log in as another user. This is useful for troubleshooting and support.
      ///
      /// Key: login::impersonationExplenation
      ///
      /// Locales: en-US
      var loginImpersonationExplenation: RswiftResources.StringResource { .init(key: "login::impersonationExplenation", tableName: "Localizable", source: source, developmentValue: "Impersonation allows you to log in as another user.\nThis is useful for troubleshooting and support.", comment: nil) }

      /// en-US translation: Enter the phone number of the user you want to impersonate
      ///
      /// Key: login::impersonationTitle
      ///
      /// Locales: en-US
      var loginImpersonationTitle: RswiftResources.StringResource { .init(key: "login::impersonationTitle", tableName: "Localizable", source: source, developmentValue: "Enter the phone number of the\nuser you want to impersonate", comment: nil) }

      /// en-US translation: Log in
      ///
      /// Key: login::login
      ///
      /// Locales: en-US
      var loginLogin: RswiftResources.StringResource { .init(key: "login::login", tableName: "Localizable", source: source, developmentValue: "Log in", comment: nil) }

      /// en-US translation: Login with phone number
      ///
      /// Key: login::loginWithPhone
      ///
      /// Locales: en-US
      var loginLoginWithPhone: RswiftResources.StringResource { .init(key: "login::loginWithPhone", tableName: "Localizable", source: source, developmentValue: "Login with phone number", comment: nil) }

      /// en-US translation: Did not receive SMS?
      ///
      /// Key: login::notReceive
      ///
      /// Locales: en-US
      var loginNotReceive: RswiftResources.StringResource { .init(key: "login::notReceive", tableName: "Localizable", source: source, developmentValue: "Did not receive SMS?", comment: nil) }

      /// en-US translation: Popular
      ///
      /// Key: login::popular
      ///
      /// Locales: en-US
      var loginPopular: RswiftResources.StringResource { .init(key: "login::popular", tableName: "Localizable", source: source, developmentValue: "Popular", comment: nil) }

      /// en-US translation: Resend code
      ///
      /// Key: login::resendCode
      ///
      /// Locales: en-US
      var loginResendCode: RswiftResources.StringResource { .init(key: "login::resendCode", tableName: "Localizable", source: source, developmentValue: "Resend code", comment: nil) }

      /// en-US translation: Select Country
      ///
      /// Key: login::selectCountry
      ///
      /// Locales: en-US
      var loginSelectCountry: RswiftResources.StringResource { .init(key: "login::selectCountry", tableName: "Localizable", source: source, developmentValue: "Select Country", comment: nil) }

      /// en-US translation: Send me the code
      ///
      /// Key: login::sendCode
      ///
      /// Locales: en-US
      var loginSendCode: RswiftResources.StringResource { .init(key: "login::sendCode", tableName: "Localizable", source: source, developmentValue: "Send me the code", comment: nil) }

      /// en-US translation: An SMS message will be sent to you shortly with a confirmation code.
      ///
      /// Key: login::smsSent
      ///
      /// Locales: en-US
      var loginSmsSent: RswiftResources.StringResource { .init(key: "login::smsSent", tableName: "Localizable", source: source, developmentValue: "An SMS message will be sent to you\nshortly with a confirmation code.", comment: nil) }

      /// en-US translation: Subscribe to Irrigation insights
      ///
      /// Key: login::subscribeToValley
      ///
      /// Locales: en-US
      var loginSubscribeToValley: RswiftResources.StringResource { .init(key: "login::subscribeToValley", tableName: "Localizable", source: source, developmentValue: "Subscribe to Irrigation insights", comment: nil) }

      /// en-US translation: Having trouble logging in?
      ///
      /// Key: login::troubleLogin
      ///
      /// Locales: en-US
      var loginTroubleLogin: RswiftResources.StringResource { .init(key: "login::troubleLogin", tableName: "Localizable", source: source, developmentValue: "Having trouble logging in?", comment: nil) }

      /// en-US translation: © 2023 Valmont Industries, Inc Terms of Use | Version
      ///
      /// Key: login::valmontIdustries
      ///
      /// Locales: en-US
      var loginValmontIdustries: RswiftResources.StringResource { .init(key: "login::valmontIdustries", tableName: "Localizable", source: source, developmentValue: "© 2023 Valmont Industries, Inc\nTerms of Use | Version", comment: nil) }

      /// en-US translation: Terms of Use
      ///
      /// Key: login::valmontIdustriesLinkPart
      ///
      /// Locales: en-US
      var loginValmontIdustriesLinkPart: RswiftResources.StringResource { .init(key: "login::valmontIdustriesLinkPart", tableName: "Localizable", source: source, developmentValue: "Terms of Use", comment: nil) }

      /// en-US translation: Verifying code…
      ///
      /// Key: login::verifyCode
      ///
      /// Locales: en-US
      var loginVerifyCode: RswiftResources.StringResource { .init(key: "login::verifyCode", tableName: "Localizable", source: source, developmentValue: "Verifying code…", comment: nil) }

      /// en-US translation: Welcome
      ///
      /// Key: login::welcome
      ///
      /// Locales: en-US
      var loginWelcome: RswiftResources.StringResource { .init(key: "login::welcome", tableName: "Localizable", source: source, developmentValue: "Welcome", comment: nil) }

      /// en-US translation: Skip impersonation
      ///
      /// Key: login:asYourself
      ///
      /// Locales: en-US
      var loginAsYourself: RswiftResources.StringResource { .init(key: "login:asYourself", tableName: "Localizable", source: source, developmentValue: "Skip impersonation", comment: nil) }

      /// en-US translation: Oops, something is not right. Try again in a few minutes
      ///
      /// Key: loginErrors::default_2_lines
      ///
      /// Locales: en-US
      var loginErrorsDefault_2_lines: RswiftResources.StringResource { .init(key: "loginErrors::default_2_lines", tableName: "Localizable", source: source, developmentValue: "Oops, something is not right. Try again\nin a few minutes", comment: nil) }

      /// en-US translation: No Insights account exists for this number. Please contact %@ or your Valley dealer.
      ///
      /// Key: loginErrors::invalid_account_error_IOS
      ///
      /// Locales: en-US
      var loginErrorsInvalid_account_error_IOS: RswiftResources.StringResource1<String> { .init(key: "loginErrors::invalid_account_error_IOS", tableName: "Localizable", source: source, developmentValue: "No Insights account exists for this number. Please contact %@ or your Valley dealer.", comment: nil) }

      /// en-US translation: Support
      ///
      /// Key: loginErrors::invalid_account_target_error
      ///
      /// Locales: en-US
      var loginErrorsInvalid_account_target_error: RswiftResources.StringResource { .init(key: "loginErrors::invalid_account_target_error", tableName: "Localizable", source: source, developmentValue: "Support", comment: nil) }

      /// en-US translation: Invalid number, please try again.
      ///
      /// Key: loginErrors::invalid_number
      ///
      /// Locales: en-US
      var loginErrorsInvalid_number: RswiftResources.StringResource { .init(key: "loginErrors::invalid_number", tableName: "Localizable", source: source, developmentValue: "Invalid number, please try again.", comment: nil) }

      /// en-US translation: The code is incorrect or expired
      ///
      /// Key: loginErrors::missing_code
      ///
      /// Locales: en-US
      var loginErrorsMissing_code: RswiftResources.StringResource { .init(key: "loginErrors::missing_code", tableName: "Localizable", source: source, developmentValue: "The code is incorrect or expired", comment: nil) }

      /// en-US translation: Your Insights account is no longer active. To resubscribe, please contact your dealer
      ///
      /// Key: loginErrors::no_fields_found
      ///
      /// Locales: en-US
      var loginErrorsNo_fields_found: RswiftResources.StringResource { .init(key: "loginErrors::no_fields_found", tableName: "Localizable", source: source, developmentValue: "Your Insights account is no longer active. To resubscribe, please contact your dealer", comment: nil) }

      /// en-US translation: 18882230595
      ///
      /// Key: loginErrorssupportNumber
      ///
      /// Locales: en-US
      var loginErrorssupportNumber: RswiftResources.StringResource { .init(key: "loginErrorssupportNumber", tableName: "Localizable", source: source, developmentValue: "18882230595", comment: nil) }

      /// en-US translation: NEW
      ///
      /// Key: new
      ///
      /// Locales: en-US
      var new: RswiftResources.StringResource { .init(key: "new", tableName: "Localizable", source: source, developmentValue: "NEW", comment: nil) }

      /// en-US translation: Night image
      ///
      /// Key: nightImage
      ///
      /// Locales: en-US
      var nightImage: RswiftResources.StringResource { .init(key: "nightImage", tableName: "Localizable", source: source, developmentValue: "Night image", comment: nil) }

      /// en-US translation: Please check your internet connection and try again
      ///
      /// Key: noConnection::checkYour internet connection
      ///
      /// Locales: en-US
      var noConnectionCheckYourInternetConnection: RswiftResources.StringResource { .init(key: "noConnection::checkYour internet connection", tableName: "Localizable", source: source, developmentValue: "Please check your internet connection and try again", comment: nil) }

      /// en-US translation: No internet connection
      ///
      /// Key: noConnection::noInternetConnection
      ///
      /// Locales: en-US
      var noConnectionNoInternetConnection: RswiftResources.StringResource { .init(key: "noConnection::noInternetConnection", tableName: "Localizable", source: source, developmentValue: "No internet connection", comment: nil) }

      /// en-US translation: OK
      ///
      /// Key: ok
      ///
      /// Locales: en-US
      var ok: RswiftResources.StringResource { .init(key: "ok", tableName: "Localizable", source: source, developmentValue: "OK", comment: nil) }

      /// en-US translation: Rate
      ///
      /// Key: rate
      ///
      /// Locales: en-US
      var rate: RswiftResources.StringResource { .init(key: "rate", tableName: "Localizable", source: source, developmentValue: "Rate", comment: nil) }

      /// en-US translation: Agronomy Consultant
      ///
      /// Key: role::agronomyConsultant
      ///
      /// Locales: en-US
      var roleAgronomyConsultant: RswiftResources.StringResource { .init(key: "role::agronomyConsultant", tableName: "Localizable", source: source, developmentValue: "Agronomy Consultant", comment: nil) }

      /// en-US translation: Before we continue, What's your role?
      ///
      /// Key: role::beforeWeContinueWhatIsYourRole
      ///
      /// Locales: en-US
      var roleBeforeWeContinueWhatIsYourRole: RswiftResources.StringResource { .init(key: "role::beforeWeContinueWhatIsYourRole", tableName: "Localizable", source: source, developmentValue: "Before we continue,\nWhat's your role?", comment: nil) }

      /// en-US translation: Farm Manager
      ///
      /// Key: role::farmManager
      ///
      /// Locales: en-US
      var roleFarmManager: RswiftResources.StringResource { .init(key: "role::farmManager", tableName: "Localizable", source: source, developmentValue: "Farm Manager", comment: nil) }

      /// en-US translation: Farm Owner
      ///
      /// Key: role::farmOwner
      ///
      /// Locales: en-US
      var roleFarmOwner: RswiftResources.StringResource { .init(key: "role::farmOwner", tableName: "Localizable", source: source, developmentValue: "Farm Owner", comment: nil) }

      /// en-US translation: Field Manager
      ///
      /// Key: role::fieldManager
      ///
      /// Locales: en-US
      var roleFieldManager: RswiftResources.StringResource { .init(key: "role::fieldManager", tableName: "Localizable", source: source, developmentValue: "Field Manager", comment: nil) }

      /// en-US translation: In-house Agronomist
      ///
      /// Key: role::inHouseAgronomist
      ///
      /// Locales: en-US
      var roleInHouseAgronomist: RswiftResources.StringResource { .init(key: "role::inHouseAgronomist", tableName: "Localizable", source: source, developmentValue: "In-house Agronomist", comment: nil) }

      /// en-US translation: Irrigation Manager
      ///
      /// Key: role::irrigationManager
      ///
      /// Locales: en-US
      var roleIrrigationManager: RswiftResources.StringResource { .init(key: "role::irrigationManager", tableName: "Localizable", source: source, developmentValue: "Irrigation Manager", comment: nil) }

      /// en-US translation: No role selected
      ///
      /// Key: role::noRoleSelected
      ///
      /// Locales: en-US
      var roleNoRoleSelected: RswiftResources.StringResource { .init(key: "role::noRoleSelected", tableName: "Localizable", source: source, developmentValue: "No role selected", comment: nil) }

      /// en-US translation: Other
      ///
      /// Key: role::other
      ///
      /// Locales: en-US
      var roleOther: RswiftResources.StringResource { .init(key: "role::other", tableName: "Localizable", source: source, developmentValue: "Other", comment: nil) }

      /// en-US translation: You can select more than one.
      ///
      /// Key: role::selectMoreThanOne
      ///
      /// Locales: en-US
      var roleSelectMoreThanOne: RswiftResources.StringResource { .init(key: "role::selectMoreThanOne", tableName: "Localizable", source: source, developmentValue: "You can select more than one.", comment: nil) }

      /// en-US translation: What's your role?
      ///
      /// Key: role::whatIsYourRole
      ///
      /// Locales: en-US
      var roleWhatIsYourRole: RswiftResources.StringResource { .init(key: "role::whatIsYourRole", tableName: "Localizable", source: source, developmentValue: "What's your role?", comment: nil) }

      /// en-US translation: You can select more than one. You can always change your role in the settings
      ///
      /// Key: role::youCanAlwaysChangeYourRole
      ///
      /// Locales: en-US
      var roleYouCanAlwaysChangeYourRole: RswiftResources.StringResource { .init(key: "role::youCanAlwaysChangeYourRole", tableName: "Localizable", source: source, developmentValue: "You can select more than one. You can\nalways change your role in the settings", comment: nil) }

      /// en-US translation: Satellite
      ///
      /// Key: satelliteType
      ///
      /// Locales: en-US
      var satelliteType: RswiftResources.StringResource { .init(key: "satelliteType", tableName: "Localizable", source: source, developmentValue: "Satellite", comment: nil) }

      /// en-US translation: Search for a field
      ///
      /// Key: search::searchForField
      ///
      /// Locales: en-US
      var searchSearchForField: RswiftResources.StringResource { .init(key: "search::searchForField", tableName: "Localizable", source: source, developmentValue: "Search for a field", comment: nil) }

      /// en-US translation: Share
      ///
      /// Key: share
      ///
      /// Locales: en-US
      var share: RswiftResources.StringResource { .init(key: "share", tableName: "Localizable", source: source, developmentValue: "Share", comment: nil) }

      /// en-US translation: Show more
      ///
      /// Key: showMore
      ///
      /// Locales: en-US
      var showMore: RswiftResources.StringResource { .init(key: "showMore", tableName: "Localizable", source: source, developmentValue: "Show more", comment: nil) }

      /// en-US translation: Submit
      ///
      /// Key: submit
      ///
      /// Locales: en-US
      var submit: RswiftResources.StringResource { .init(key: "submit", tableName: "Localizable", source: source, developmentValue: "Submit", comment: nil) }

      /// en-US translation: Tap to zoom
      ///
      /// Key: tapToZoom
      ///
      /// Locales: en-US
      var tapToZoom: RswiftResources.StringResource { .init(key: "tapToZoom", tableName: "Localizable", source: source, developmentValue: "Tap to zoom", comment: nil) }

      /// en-US translation: Thanks, got it
      ///
      /// Key: thanksGotIt
      ///
      /// Locales: en-US
      var thanksGotIt: RswiftResources.StringResource { .init(key: "thanksGotIt", tableName: "Localizable", source: source, developmentValue: "Thanks, got it", comment: nil) }

      /// en-US translation: %dd ago
      ///
      /// Key: timeAgo::days_MOBILE
      ///
      /// Locales: en-US
      var timeAgoDays_MOBILE: RswiftResources.StringResource1<Int> { .init(key: "timeAgo::days_MOBILE", tableName: "Localizable", source: source, developmentValue: "%dd ago", comment: nil) }

      /// en-US translation: %dh ago
      ///
      /// Key: timeAgo::hours_MOBILE
      ///
      /// Locales: en-US
      var timeAgoHours_MOBILE: RswiftResources.StringResource1<Int> { .init(key: "timeAgo::hours_MOBILE", tableName: "Localizable", source: source, developmentValue: "%dh ago", comment: nil) }

      /// en-US translation: now
      ///
      /// Key: timeAgo::now
      ///
      /// Locales: en-US
      var timeAgoNow: RswiftResources.StringResource { .init(key: "timeAgo::now", tableName: "Localizable", source: source, developmentValue: "now", comment: nil) }

      /// en-US translation: %dw ago
      ///
      /// Key: timeAgo::weeks_MOBILE
      ///
      /// Locales: en-US
      var timeAgoWeeks_MOBILE: RswiftResources.StringResource1<Int> { .init(key: "timeAgo::weeks_MOBILE", tableName: "Localizable", source: source, developmentValue: "%dw ago", comment: nil) }

      /// en-US translation: %dmo ago
      ///
      /// Key: timeAgo:months_MOBILE
      ///
      /// Locales: en-US
      var timeAgoMonths_MOBILE: RswiftResources.StringResource1<Int> { .init(key: "timeAgo:months_MOBILE", tableName: "Localizable", source: source, developmentValue: "%dmo ago", comment: nil) }

      /// en-US translation: %dy ago
      ///
      /// Key: timeAgo:years_MOBILE
      ///
      /// Locales: en-US
      var timeAgoYears_MOBILE: RswiftResources.StringResource1<Int> { .init(key: "timeAgo:years_MOBILE", tableName: "Localizable", source: source, developmentValue: "%dy ago", comment: nil) }

      /// en-US translation: Today
      ///
      /// Key: today
      ///
      /// Locales: en-US
      var today: RswiftResources.StringResource { .init(key: "today", tableName: "Localizable", source: source, developmentValue: "Today", comment: nil) }

      /// en-US translation: Type
      ///
      /// Key: type
      ///
      /// Locales: en-US
      var type: RswiftResources.StringResource { .init(key: "type", tableName: "Localizable", source: source, developmentValue: "Type", comment: nil) }

      /// en-US translation: New version available
      ///
      /// Key: update::newVersionAvailable
      ///
      /// Locales: en-US
      var updateNewVersionAvailable: RswiftResources.StringResource { .init(key: "update::newVersionAvailable", tableName: "Localizable", source: source, developmentValue: "New version available", comment: nil) }

      /// en-US translation: To get the most of Insights,  please update your app
      ///
      /// Key: update::pleaseUpdateYourApp
      ///
      /// Locales: en-US
      var updatePleaseUpdateYourApp: RswiftResources.StringResource { .init(key: "update::pleaseUpdateYourApp", tableName: "Localizable", source: source, developmentValue: "To get the most of Insights,\n please update your app", comment: nil) }

      /// en-US translation: Update now
      ///
      /// Key: update::updateNow
      ///
      /// Locales: en-US
      var updateUpdateNow: RswiftResources.StringResource { .init(key: "update::updateNow", tableName: "Localizable", source: source, developmentValue: "Update now", comment: nil) }

      /// en-US translation: An updated version of Insights is available and required for app use
      ///
      /// Key: update::updatedVersionAvailable
      ///
      /// Locales: en-US
      var updateUpdatedVersionAvailable: RswiftResources.StringResource { .init(key: "update::updatedVersionAvailable", tableName: "Localizable", source: source, developmentValue: "An updated version of Insights is available and required for app use", comment: nil) }

      /// en-US translation: Version update required
      ///
      /// Key: update::versionUpdateRequired
      ///
      /// Locales: en-US
      var updateVersionUpdateRequired: RswiftResources.StringResource { .init(key: "update::versionUpdateRequired", tableName: "Localizable", source: source, developmentValue: "Version update required", comment: nil) }

      /// en-US translation: COVERAGE
      ///
      /// Key: userReport::coverage
      ///
      /// Locales: en-US
      var userReportCoverage: RswiftResources.StringResource { .init(key: "userReport::coverage", tableName: "Localizable", source: source, developmentValue: "COVERAGE", comment: nil) }

      /// en-US translation: FIELDS
      ///
      /// Key: userReport::fields
      ///
      /// Locales: en-US
      var userReportFields: RswiftResources.StringResource { .init(key: "userReport::fields", tableName: "Localizable", source: source, developmentValue: "FIELDS", comment: nil) }

      /// en-US translation: IMAGERY
      ///
      /// Key: userReport::imagery
      ///
      /// Locales: en-US
      var userReportImagery: RswiftResources.StringResource { .init(key: "userReport::imagery", tableName: "Localizable", source: source, developmentValue: "IMAGERY", comment: nil) }

      /// en-US translation: INSIGHTS
      ///
      /// Key: userReport::insights
      ///
      /// Locales: en-US
      var userReportInsights: RswiftResources.StringResource { .init(key: "userReport::insights", tableName: "Localizable", source: source, developmentValue: "INSIGHTS", comment: nil) }

      /// en-US translation: View all imagery
      ///
      /// Key: userReport::viewAllImagery
      ///
      /// Locales: en-US
      var userReportViewAllImagery: RswiftResources.StringResource { .init(key: "userReport::viewAllImagery", tableName: "Localizable", source: source, developmentValue: "View all imagery", comment: nil) }

      /// en-US translation: Change dates to view scanned areas
      ///
      /// Key: virtualScouting::guideChangeDates
      ///
      /// Locales: en-US
      var virtualScoutingGuideChangeDates: RswiftResources.StringResource { .init(key: "virtualScouting::guideChangeDates", tableName: "Localizable", source: source, developmentValue: "Change dates to view scanned areas", comment: nil) }

      /// en-US translation: Pinch map to zoom
      ///
      /// Key: virtualScouting::guidePinchMapToZoom
      ///
      /// Locales: en-US
      var virtualScoutingGuidePinchMapToZoom: RswiftResources.StringResource { .init(key: "virtualScouting::guidePinchMapToZoom", tableName: "Localizable", source: source, developmentValue: "Pinch map to zoom", comment: nil) }

      /// en-US translation: Tap on a cell to view images
      ///
      /// Key: virtualScouting::guideTapOnCell
      ///
      /// Locales: en-US
      var virtualScoutingGuideTapOnCell: RswiftResources.StringResource { .init(key: "virtualScouting::guideTapOnCell", tableName: "Localizable", source: source, developmentValue: "Tap on a cell to view images", comment: nil) }

      /// en-US translation: Virtual Scouting​
      ///
      /// Key: virtualScouting::virtualScoutingButton
      ///
      /// Locales: en-US
      var virtualScoutingVirtualScoutingButton: RswiftResources.StringResource { .init(key: "virtualScouting::virtualScoutingButton", tableName: "Localizable", source: source, developmentValue: "Virtual Scouting​", comment: nil) }

      /// en-US translation: Welcome to Insights
      ///
      /// Key: walkthrough::WelcomeToValley
      ///
      /// Locales: en-US
      var walkthroughWelcomeToValley: RswiftResources.StringResource { .init(key: "walkthrough::WelcomeToValley", tableName: "Localizable", source: source, developmentValue: "Welcome to Insights", comment: nil) }

      /// en-US translation: Capture Your Field Imagery
      ///
      /// Key: walkthrough::captureFieldImagery
      ///
      /// Locales: en-US
      var walkthroughCaptureFieldImagery: RswiftResources.StringResource { .init(key: "walkthrough::captureFieldImagery", tableName: "Localizable", source: source, developmentValue: "Capture Your Field Imagery", comment: nil) }

      /// en-US translation: Detect Issues in Your Fields Early
      ///
      /// Key: walkthrough::detectIssuesEarly
      ///
      /// Locales: en-US
      var walkthroughDetectIssuesEarly: RswiftResources.StringResource { .init(key: "walkthrough::detectIssuesEarly", tableName: "Localizable", source: source, developmentValue: "Detect Issues in Your Fields Early", comment: nil) }

      /// en-US translation: Get Notified, Take Action
      ///
      /// Key: walkthrough::getNotified
      ///
      /// Locales: en-US
      var walkthroughGetNotified: RswiftResources.StringResource { .init(key: "walkthrough::getNotified", tableName: "Localizable", source: source, developmentValue: "Get Notified, Take Action", comment: nil) }

      /// en-US translation: Get Started
      ///
      /// Key: walkthrough::getStarted
      ///
      /// Locales: en-US
      var walkthroughGetStarted: RswiftResources.StringResource { .init(key: "walkthrough::getStarted", tableName: "Localizable", source: source, developmentValue: "Get Started", comment: nil) }

      /// en-US translation: Let’s get started
      ///
      /// Key: walkthrough::letsGetStarted
      ///
      /// Locales: en-US
      var walkthroughLetsGetStarted: RswiftResources.StringResource { .init(key: "walkthrough::letsGetStarted", tableName: "Localizable", source: source, developmentValue: "Let’s get started", comment: nil) }

      /// en-US translation: Next
      ///
      /// Key: walkthrough::next
      ///
      /// Locales: en-US
      var walkthroughNext: RswiftResources.StringResource { .init(key: "walkthrough::next", tableName: "Localizable", source: source, developmentValue: "Next", comment: nil) }

      /// en-US translation: Receive alerts & comprehensive reports so you can take fast action
      ///
      /// Key: walkthrough::receiveAlertsReports
      ///
      /// Locales: en-US
      var walkthroughReceiveAlertsReports: RswiftResources.StringResource { .init(key: "walkthrough::receiveAlertsReports", tableName: "Localizable", source: source, developmentValue: "Receive alerts & comprehensive reports\nso you can take fast action", comment: nil) }

      /// en-US translation: We scan and capture various image types in different resolutions from multiple sources
      ///
      /// Key: walkthrough::scanVariousImageTypes
      ///
      /// Locales: en-US
      var walkthroughScanVariousImageTypes: RswiftResources.StringResource { .init(key: "walkthrough::scanVariousImageTypes", tableName: "Localizable", source: source, developmentValue: "We scan and capture various image types in different resolutions from multiple sources", comment: nil) }

      /// en-US translation: Turning data into action
      ///
      /// Key: walkthrough::turningData
      ///
      /// Locales: en-US
      var walkthroughTurningData: RswiftResources.StringResource { .init(key: "walkthrough::turningData", tableName: "Localizable", source: source, developmentValue: "Turning data into action", comment: nil) }

      /// en-US translation: Using artificial intelligence (AI) technology, we analyze your fields to detect anomalies and provide you with easy-to-use reports
      ///
      /// Key: walkthrough::usingArtificialIntelligenceTechnology
      ///
      /// Locales: en-US
      var walkthroughUsingArtificialIntelligenceTechnology: RswiftResources.StringResource { .init(key: "walkthrough::usingArtificialIntelligenceTechnology", tableName: "Localizable", source: source, developmentValue: "Using artificial intelligence (AI) technology, we analyze your fields to detect anomalies and provide you with easy-to-use reports", comment: nil) }

      /// en-US translation: View your field's full imagery and detections over time
      ///
      /// Key: welcome::analayzeTip
      ///
      /// Locales: en-US
      var welcomeAnalayzeTip: RswiftResources.StringResource { .init(key: "welcome::analayzeTip", tableName: "Localizable", source: source, developmentValue: "View your field's full imagery and detections over time", comment: nil) }

      /// en-US translation: All of your field's insights are accessible in one place
      ///
      /// Key: welcome::fieldTip
      ///
      /// Locales: en-US
      var welcomeFieldTip: RswiftResources.StringResource { .init(key: "welcome::fieldTip", tableName: "Localizable", source: source, developmentValue: "All of your field's insights are accessible in one place", comment: nil) }

      /// en-US translation: Coming soon - access all insights and imagery per-field
      ///
      /// Key: welcome::myFieldsTip
      ///
      /// Locales: en-US
      var welcomeMyFieldsTip: RswiftResources.StringResource { .init(key: "welcome::myFieldsTip", tableName: "Localizable", source: source, developmentValue: "Coming soon - access all insights and imagery per-field", comment: nil) }

      /// en-US translation: New - view all imagery and insights - per field
      ///
      /// Key: welcome::myFieldsTipNew
      ///
      /// Locales: en-US
      var welcomeMyFieldsTipNew: RswiftResources.StringResource { .init(key: "welcome::myFieldsTipNew", tableName: "Localizable", source: source, developmentValue: "New - view all imagery and insights - per field", comment: nil) }

      /// en-US translation: Share insight via the media channel of your choice
      ///
      /// Key: welcome::shareTip
      ///
      /// Locales: en-US
      var welcomeShareTip: RswiftResources.StringResource { .init(key: "welcome::shareTip", tableName: "Localizable", source: source, developmentValue: "Share insight via the media channel of your choice", comment: nil) }

      /// en-US translation: Yesterday
      ///
      /// Key: yesterday
      ///
      /// Locales: en-US
      var yesterday: RswiftResources.StringResource { .init(key: "yesterday", tableName: "Localizable", source: source, developmentValue: "Yesterday", comment: nil) }
    }

    /// This `_R.string.strings` struct is generated, and contains static references to 3 localization keys.
    struct strings {
      let source: RswiftResources.StringResource.Source

      /// en-US translation: %#@fields_count@
      ///
      /// Key: fieldsCount
      ///
      /// Locales: en-US, pt-BR
      var fieldsCount: RswiftResources.StringResource1<UInt> { .init(key: "fieldsCount", tableName: "Strings", source: source, developmentValue: "%#@fields_count@", comment: nil) }

      /// en-US translation: %#@insights_updates@
      ///
      /// Key: insightsUpdates
      ///
      /// Locales: en-US, pt-BR
      var insightsUpdates: RswiftResources.StringResource1<UInt> { .init(key: "insightsUpdates", tableName: "Strings", source: source, developmentValue: "%#@insights_updates@", comment: nil) }

      /// en-US translation: %#@unread_insights_count@
      ///
      /// Key: unreadInsightsCount
      ///
      /// Locales: en-US, pt-BR
      var unreadInsightsCount: RswiftResources.StringResource1<UInt> { .init(key: "unreadInsightsCount", tableName: "Strings", source: source, developmentValue: "%#@unread_insights_count@", comment: nil) }


      /// en-US translation: %#@fields_count@
      ///
      /// Key: fieldsCount
      ///
      /// Locales: en-US, pt-BR
      func fieldsCount(fields_count value1: UInt) -> String {
        String(format: fieldsCount, value1)
      }

      /// en-US translation: %#@fields_count@
      ///
      /// Key: fieldsCount
      ///
      /// Locales: en-US, pt-BR
      @available(*, deprecated, message: "Use R.string(preferredLanguages:).*.* instead")
      func fieldsCount(fields_count value1: UInt, preferredLanguages: [String]) -> String {
        String(format: fieldsCount, preferredLanguages: preferredLanguages, value1)
      }

      /// en-US translation: %#@insights_updates@
      ///
      /// Key: insightsUpdates
      ///
      /// Locales: en-US, pt-BR
      func insightsUpdates(insights_updates value1: UInt) -> String {
        String(format: insightsUpdates, value1)
      }

      /// en-US translation: %#@insights_updates@
      ///
      /// Key: insightsUpdates
      ///
      /// Locales: en-US, pt-BR
      @available(*, deprecated, message: "Use R.string(preferredLanguages:).*.* instead")
      func insightsUpdates(insights_updates value1: UInt, preferredLanguages: [String]) -> String {
        String(format: insightsUpdates, preferredLanguages: preferredLanguages, value1)
      }

      /// en-US translation: %#@unread_insights_count@
      ///
      /// Key: unreadInsightsCount
      ///
      /// Locales: en-US, pt-BR
      func unreadInsightsCount(unread_insights_count value1: UInt) -> String {
        String(format: unreadInsightsCount, value1)
      }

      /// en-US translation: %#@unread_insights_count@
      ///
      /// Key: unreadInsightsCount
      ///
      /// Locales: en-US, pt-BR
      @available(*, deprecated, message: "Use R.string(preferredLanguages:).*.* instead")
      func unreadInsightsCount(unread_insights_count value1: UInt, preferredLanguages: [String]) -> String {
        String(format: unreadInsightsCount, preferredLanguages: preferredLanguages, value1)
      }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 50 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `Gray1`.
    var gray1: RswiftResources.ColorResource { .init(name: "Gray1", path: [], bundle: bundle) }

    /// Color `Gray7`.
    var gray7: RswiftResources.ColorResource { .init(name: "Gray7", path: [], bundle: bundle) }

    /// Color `Gray9`.
    var gray9: RswiftResources.ColorResource { .init(name: "Gray9", path: [], bundle: bundle) }

    /// Color `LightGreyOpacity`.
    var lightGreyOpacity: RswiftResources.ColorResource { .init(name: "LightGreyOpacity", path: [], bundle: bundle) }

    /// Color `blacK`.
    var blacK: RswiftResources.ColorResource { .init(name: "blacK", path: [], bundle: bundle) }

    /// Color `black60`.
    var black60: RswiftResources.ColorResource { .init(name: "black60", path: [], bundle: bundle) }

    /// Color `blackTitle`.
    var blackTitle: RswiftResources.ColorResource { .init(name: "blackTitle", path: [], bundle: bundle) }

    /// Color `darkMint`.
    var darkMint: RswiftResources.ColorResource { .init(name: "darkMint", path: [], bundle: bundle) }

    /// Color `enhancedLocationColor`.
    var enhancedLocationColor: RswiftResources.ColorResource { .init(name: "enhancedLocationColor", path: [], bundle: bundle) }

    /// Color `error`.
    var error: RswiftResources.ColorResource { .init(name: "error", path: [], bundle: bundle) }

    /// Color `firstDetectionIconBackground`.
    var firstDetectionIconBackground: RswiftResources.ColorResource { .init(name: "firstDetectionIconBackground", path: [], bundle: bundle) }

    /// Color `gray10`.
    var gray10: RswiftResources.ColorResource { .init(name: "gray10", path: [], bundle: bundle) }

    /// Color `gray4`.
    var gray4: RswiftResources.ColorResource { .init(name: "gray4", path: [], bundle: bundle) }

    /// Color `gray8`.
    var gray8: RswiftResources.ColorResource { .init(name: "gray8", path: [], bundle: bundle) }

    /// Color `grayDevider`.
    var grayDevider: RswiftResources.ColorResource { .init(name: "grayDevider", path: [], bundle: bundle) }

    /// Color `green7`.
    var green7: RswiftResources.ColorResource { .init(name: "green7", path: [], bundle: bundle) }

    /// Color `grey3`.
    var grey3: RswiftResources.ColorResource { .init(name: "grey3", path: [], bundle: bundle) }

    /// Color `highLightedCell`.
    var highLightedCell: RswiftResources.ColorResource { .init(name: "highLightedCell", path: [], bundle: bundle) }

    /// Color `imagesPurpul`.
    var imagesPurpul: RswiftResources.ColorResource { .init(name: "imagesPurpul", path: [], bundle: bundle) }

    /// Color `issueLocationColors`.
    var issueLocationColors: RswiftResources.ColorResource { .init(name: "issueLocationColors", path: [], bundle: bundle) }

    /// Color `johnDeere`.
    var johnDeere: RswiftResources.ColorResource { .init(name: "johnDeere", path: [], bundle: bundle) }

    /// Color `lightBlueGrey`.
    var lightBlueGrey: RswiftResources.ColorResource { .init(name: "lightBlueGrey", path: [], bundle: bundle) }

    /// Color `lightGrey`.
    var lightGrey: RswiftResources.ColorResource { .init(name: "lightGrey", path: [], bundle: bundle) }

    /// Color `meidumContrastYellow`.
    var meidumContrastYellow: RswiftResources.ColorResource { .init(name: "meidumContrastYellow", path: [], bundle: bundle) }

    /// Color `meidumContrastYellowOpacity`.
    var meidumContrastYellowOpacity: RswiftResources.ColorResource { .init(name: "meidumContrastYellowOpacity", path: [], bundle: bundle) }

    /// Color `oceanBlue`.
    var oceanBlue: RswiftResources.ColorResource { .init(name: "oceanBlue", path: [], bundle: bundle) }

    /// Color `orange`.
    var orange: RswiftResources.ColorResource { .init(name: "orange", path: [], bundle: bundle) }

    /// Color `primary`.
    var primary: RswiftResources.ColorResource { .init(name: "primary", path: [], bundle: bundle) }

    /// Color `primaryGreen`.
    var primaryGreen: RswiftResources.ColorResource { .init(name: "primaryGreen", path: [], bundle: bundle) }

    /// Color `rangedLocationColors`.
    var rangedLocationColors: RswiftResources.ColorResource { .init(name: "rangedLocationColors", path: [], bundle: bundle) }

    /// Color `readSelected`.
    var readSelected: RswiftResources.ColorResource { .init(name: "readSelected", path: [], bundle: bundle) }

    /// Color `red`.
    var red: RswiftResources.ColorResource { .init(name: "red", path: [], bundle: bundle) }

    /// Color `screenBg`.
    var screenBg: RswiftResources.ColorResource { .init(name: "screenBg", path: [], bundle: bundle) }

    /// Color `searchBarColor`.
    var searchBarColor: RswiftResources.ColorResource { .init(name: "searchBarColor", path: [], bundle: bundle) }

    /// Color `secondary`.
    var secondary: RswiftResources.ColorResource { .init(name: "secondary", path: [], bundle: bundle) }

    /// Color `selectedBackGround`.
    var selectedBackGround: RswiftResources.ColorResource { .init(name: "selectedBackGround", path: [], bundle: bundle) }

    /// Color `selectedBackgroundColor`.
    var selectedBackgroundColor: RswiftResources.ColorResource { .init(name: "selectedBackgroundColor", path: [], bundle: bundle) }

    /// Color `selectedBorder`.
    var selectedBorder: RswiftResources.ColorResource { .init(name: "selectedBorder", path: [], bundle: bundle) }

    /// Color `selectedBorderColor`.
    var selectedBorderColor: RswiftResources.ColorResource { .init(name: "selectedBorderColor", path: [], bundle: bundle) }

    /// Color `tealishGreen`.
    var tealishGreen: RswiftResources.ColorResource { .init(name: "tealishGreen", path: [], bundle: bundle) }

    /// Color `toggleUnselected`.
    var toggleUnselected: RswiftResources.ColorResource { .init(name: "toggleUnselected", path: [], bundle: bundle) }

    /// Color `valleyBrand`.
    var valleyBrand: RswiftResources.ColorResource { .init(name: "valleyBrand", path: [], bundle: bundle) }

    /// Color `valleyDarkBrand`.
    var valleyDarkBrand: RswiftResources.ColorResource { .init(name: "valleyDarkBrand", path: [], bundle: bundle) }

    /// Color `valleyLightBrand`.
    var valleyLightBrand: RswiftResources.ColorResource { .init(name: "valleyLightBrand", path: [], bundle: bundle) }

    /// Color `white`.
    var white: RswiftResources.ColorResource { .init(name: "white", path: [], bundle: bundle) }

    /// Color `white19`.
    var white19: RswiftResources.ColorResource { .init(name: "white19", path: [], bundle: bundle) }

    /// Color `white40`.
    var white40: RswiftResources.ColorResource { .init(name: "white40", path: [], bundle: bundle) }

    /// Color `white42`.
    var white42: RswiftResources.ColorResource { .init(name: "white42", path: [], bundle: bundle) }

    /// Color `white7`.
    var white7: RswiftResources.ColorResource { .init(name: "white7", path: [], bundle: bundle) }

    /// Color `white70`.
    var white70: RswiftResources.ColorResource { .init(name: "white70", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 141 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `ArrowDown`.
    var arrowDown: RswiftResources.ImageResource { .init(name: "ArrowDown", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ArrowUp`.
    var arrowUp: RswiftResources.ImageResource { .init(name: "ArrowUp", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `BackArrowBlack`.
    var backArrowBlack: RswiftResources.ImageResource { .init(name: "BackArrowBlack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Beta`.
    var beta: RswiftResources.ImageResource { .init(name: "Beta", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `BlackArrowBack`.
    var blackArrowBack: RswiftResources.ImageResource { .init(name: "BlackArrowBack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `CaretDown`.
    var caretDown: RswiftResources.ImageResource { .init(name: "CaretDown", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `FeedbackStarSelected`.
    var feedbackStarSelected: RswiftResources.ImageResource { .init(name: "FeedbackStarSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `FeedbackStarUnselected`.
    var feedbackStarUnselected: RswiftResources.ImageResource { .init(name: "FeedbackStarUnselected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `NEW`.
    var neW: RswiftResources.ImageResource { .init(name: "NEW", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `RadioButtonOff`.
    var radioButtonOff: RswiftResources.ImageResource { .init(name: "RadioButtonOff", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `RadioButtonOn`.
    var radioButtonOn: RswiftResources.ImageResource { .init(name: "RadioButtonOn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `SlidersHorizontal`.
    var slidersHorizontal: RswiftResources.ImageResource { .init(name: "SlidersHorizontal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Union`.
    var union: RswiftResources.ImageResource { .init(name: "Union", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `WhiteArrowBack`.
    var whiteArrowBack: RswiftResources.ImageResource { .init(name: "WhiteArrowBack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `account_arrow`.
    var account_arrow: RswiftResources.ImageResource { .init(name: "account_arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `airplane_black`.
    var airplane_black: RswiftResources.ImageResource { .init(name: "airplane_black", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `amitai`.
    var amitai: RswiftResources.ImageResource { .init(name: "amitai", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `analysis_date`.
    var analysis_date: RswiftResources.ImageResource { .init(name: "analysis_date", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `analysis_date_off`.
    var analysis_date_off: RswiftResources.ImageResource { .init(name: "analysis_date_off", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `analysis_date_plane`.
    var analysis_date_plane: RswiftResources.ImageResource { .init(name: "analysis_date_plane", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `analysis_detection`.
    var analysis_detection: RswiftResources.ImageResource { .init(name: "analysis_detection", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `analysis_detection_off`.
    var analysis_detection_off: RswiftResources.ImageResource { .init(name: "analysis_detection_off", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `analysis_layers`.
    var analysis_layers: RswiftResources.ImageResource { .init(name: "analysis_layers", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `analysis_layers_off`.
    var analysis_layers_off: RswiftResources.ImageResource { .init(name: "analysis_layers_off", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `analyzeIconLightGrey`.
    var analyzeIconLightGrey: RswiftResources.ImageResource { .init(name: "analyzeIconLightGrey", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `analyzeIconValley`.
    var analyzeIconValley: RswiftResources.ImageResource { .init(name: "analyzeIconValley", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `analyzeIconWhite`.
    var analyzeIconWhite: RswiftResources.ImageResource { .init(name: "analyzeIconWhite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `backArrowWhite`.
    var backArrowWhite: RswiftResources.ImageResource { .init(name: "backArrowWhite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `binoculargrey`.
    var binoculargrey: RswiftResources.ImageResource { .init(name: "binoculargrey", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `binoculars`.
    var binoculars: RswiftResources.ImageResource { .init(name: "binoculars", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `blue-v`.
    var blueV: RswiftResources.ImageResource { .init(name: "blue-v", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cloud`.
    var cloud: RswiftResources.ImageResource { .init(name: "cloud", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cloudBlue`.
    var cloudBlue: RswiftResources.ImageResource { .init(name: "cloudBlue", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `compare_gif.gif`.
    var compare_gifGif: RswiftResources.ImageResource { .init(name: "compare_gif.gif", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `compare_icon`.
    var compare_icon: RswiftResources.ImageResource { .init(name: "compare_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `compare_icon_blue`.
    var compare_icon_blue: RswiftResources.ImageResource { .init(name: "compare_icon_blue", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dropDown`.
    var dropDown: RswiftResources.ImageResource { .init(name: "dropDown", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `drop_down_arrow`.
    var drop_down_arrow: RswiftResources.ImageResource { .init(name: "drop_down_arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `emergence_stand_count_icon`.
    var emergence_stand_count_icon: RswiftResources.ImageResource { .init(name: "emergence_stand_count_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `enhance_severity_arrow_down`.
    var enhance_severity_arrow_down: RswiftResources.ImageResource { .init(name: "enhance_severity_arrow_down", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `enhance_severity_arrow_up`.
    var enhance_severity_arrow_up: RswiftResources.ImageResource { .init(name: "enhance_severity_arrow_up", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fieldHeaderPlaceholder`.
    var fieldHeaderPlaceholder: RswiftResources.ImageResource { .init(name: "fieldHeaderPlaceholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `forceUpdateImage`.
    var forceUpdateImage: RswiftResources.ImageResource { .init(name: "forceUpdateImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `gree_arrow_right`.
    var gree_arrow_right: RswiftResources.ImageResource { .init(name: "gree_arrow_right", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `grey-x-icon`.
    var greyXIcon: RswiftResources.ImageResource { .init(name: "grey-x-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guideChangeDatesIcon`.
    var guideChangeDatesIcon: RswiftResources.ImageResource { .init(name: "guideChangeDatesIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guideCloseIcon`.
    var guideCloseIcon: RswiftResources.ImageResource { .init(name: "guideCloseIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guideDayTimeIcon`.
    var guideDayTimeIcon: RswiftResources.ImageResource { .init(name: "guideDayTimeIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guidePinchIcon`.
    var guidePinchIcon: RswiftResources.ImageResource { .init(name: "guidePinchIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `guideTapImageIcon`.
    var guideTapImageIcon: RswiftResources.ImageResource { .init(name: "guideTapImageIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `headerSearchIcon`.
    var headerSearchIcon: RswiftResources.ImageResource { .init(name: "headerSearchIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `help`.
    var help: RswiftResources.ImageResource { .init(name: "help", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `hideTag`.
    var hideTag: RswiftResources.ImageResource { .init(name: "hideTag", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `highlightBtn`.
    var highlightBtn: RswiftResources.ImageResource { .init(name: "highlightBtn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `highlightIcon`.
    var highlightIcon: RswiftResources.ImageResource { .init(name: "highlightIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `highlight_empty_icon`.
    var highlight_empty_icon: RswiftResources.ImageResource { .init(name: "highlight_empty_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconValleyInsightsX`.
    var iconValleyInsightsX: RswiftResources.ImageResource { .init(name: "iconValleyInsightsX", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconValleyInsightsXWhite`.
    var iconValleyInsightsXWhite: RswiftResources.ImageResource { .init(name: "iconValleyInsightsXWhite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `imageError`.
    var imageError: RswiftResources.ImageResource { .init(name: "imageError", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `imagePlaceholder`.
    var imagePlaceholder: RswiftResources.ImageResource { .init(name: "imagePlaceholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `imageThumbnailPlaceHolder`.
    var imageThumbnailPlaceHolder: RswiftResources.ImageResource { .init(name: "imageThumbnailPlaceHolder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `imageUnavailable`.
    var imageUnavailable: RswiftResources.ImageResource { .init(name: "imageUnavailable", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `imageryHeaderBg`.
    var imageryHeaderBg: RswiftResources.ImageResource { .init(name: "imageryHeaderBg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `imagery_icon`.
    var imagery_icon: RswiftResources.ImageResource { .init(name: "imagery_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `inboxEmptyUnread`.
    var inboxEmptyUnread: RswiftResources.ImageResource { .init(name: "inboxEmptyUnread", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `inboxErrorState`.
    var inboxErrorState: RswiftResources.ImageResource { .init(name: "inboxErrorState", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `info_blue`.
    var info_blue: RswiftResources.ImageResource { .init(name: "info_blue", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `info_icon_24pt`.
    var info_icon_24pt: RswiftResources.ImageResource { .init(name: "info_icon_24pt", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `irrigationHighlightIcon`.
    var irrigationHighlightIcon: RswiftResources.ImageResource { .init(name: "irrigationHighlightIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `johnDeere`.
    var johnDeere: RswiftResources.ImageResource { .init(name: "johnDeere", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `keyboard_backspace`.
    var keyboard_backspace: RswiftResources.ImageResource { .init(name: "keyboard_backspace", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `language_icon`.
    var language_icon: RswiftResources.ImageResource { .init(name: "language_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `language_icon_black`.
    var language_icon_black: RswiftResources.ImageResource { .init(name: "language_icon_black", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `layer_guide_ndvi`.
    var layer_guide_ndvi: RswiftResources.ImageResource { .init(name: "layer_guide_ndvi", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `layer_guide_ndvi_color_map`.
    var layer_guide_ndvi_color_map: RswiftResources.ImageResource { .init(name: "layer_guide_ndvi_color_map", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `layer_guide_rgb`.
    var layer_guide_rgb: RswiftResources.ImageResource { .init(name: "layer_guide_rgb", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `layer_guide_thermal`.
    var layer_guide_thermal: RswiftResources.ImageResource { .init(name: "layer_guide_thermal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `layer_guide_thermal_color_map`.
    var layer_guide_thermal_color_map: RswiftResources.ImageResource { .init(name: "layer_guide_thermal_color_map", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `layer_off`.
    var layer_off: RswiftResources.ImageResource { .init(name: "layer_off", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `leftWhiteArrow`.
    var leftWhiteArrow: RswiftResources.ImageResource { .init(name: "leftWhiteArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `left_arrow_24pt`.
    var left_arrow_24pt: RswiftResources.ImageResource { .init(name: "left_arrow_24pt", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `left_arrow_bold_24pt`.
    var left_arrow_bold_24pt: RswiftResources.ImageResource { .init(name: "left_arrow_bold_24pt", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `left_arrow_disabled_24pt`.
    var left_arrow_disabled_24pt: RswiftResources.ImageResource { .init(name: "left_arrow_disabled_24pt", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `lightningBlue`.
    var lightningBlue: RswiftResources.ImageResource { .init(name: "lightningBlue", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `locationPinIcon`.
    var locationPinIcon: RswiftResources.ImageResource { .init(name: "locationPinIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `location_Info`.
    var location_Info: RswiftResources.ImageResource { .init(name: "location_Info", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `login_bg`.
    var login_bg: RswiftResources.ImageResource { .init(name: "login_bg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `login_bg_blur`.
    var login_bg_blur: RswiftResources.ImageResource { .init(name: "login_bg_blur", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `logout`.
    var logout: RswiftResources.ImageResource { .init(name: "logout", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `markAsUnread`.
    var markAsUnread: RswiftResources.ImageResource { .init(name: "markAsUnread", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `missing_image_icon`.
    var missing_image_icon: RswiftResources.ImageResource { .init(name: "missing_image_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `monthley-report-background`.
    var monthleyReportBackground: RswiftResources.ImageResource { .init(name: "monthley-report-background", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `monthly-report-fields-icon`.
    var monthlyReportFieldsIcon: RswiftResources.ImageResource { .init(name: "monthly-report-fields-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `monthly-report-imagery-cover-image`.
    var monthlyReportImageryCoverImage: RswiftResources.ImageResource { .init(name: "monthly-report-imagery-cover-image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `monthly-report-imagery-icon`.
    var monthlyReportImageryIcon: RswiftResources.ImageResource { .init(name: "monthly-report-imagery-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `monthly-report-images-icon`.
    var monthlyReportImagesIcon: RswiftResources.ImageResource { .init(name: "monthly-report-images-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `monthly-report-view-arrow`.
    var monthlyReportViewArrow: RswiftResources.ImageResource { .init(name: "monthly-report-view-arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `monthly-report-view-arrow-read`.
    var monthlyReportViewArrowRead: RswiftResources.ImageResource { .init(name: "monthly-report-view-arrow-read", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `monthly-report-view-icon`.
    var monthlyReportViewIcon: RswiftResources.ImageResource { .init(name: "monthly-report-view-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `monthly-report-weeks-icon`.
    var monthlyReportWeeksIcon: RswiftResources.ImageResource { .init(name: "monthly-report-weeks-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `navigateIcon`.
    var navigateIcon: RswiftResources.ImageResource { .init(name: "navigateIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `nightBadge`.
    var nightBadge: RswiftResources.ImageResource { .init(name: "nightBadge", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `no-filter-image`.
    var noFilterImage: RswiftResources.ImageResource { .init(name: "no-filter-image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `north`.
    var north: RswiftResources.ImageResource { .init(name: "north", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `notification`.
    var notification: RswiftResources.ImageResource { .init(name: "notification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `prosperaLogo`.
    var prosperaLogo: RswiftResources.ImageResource { .init(name: "prosperaLogo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `readFilter`.
    var readFilter: RswiftResources.ImageResource { .init(name: "readFilter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `rightWhiteArrow`.
    var rightWhiteArrow: RswiftResources.ImageResource { .init(name: "rightWhiteArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `right_arrow_17pt`.
    var right_arrow_17pt: RswiftResources.ImageResource { .init(name: "right_arrow_17pt", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `right_arrow_24pt`.
    var right_arrow_24pt: RswiftResources.ImageResource { .init(name: "right_arrow_24pt", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `right_arrow_disabled_24pt`.
    var right_arrow_disabled_24pt: RswiftResources.ImageResource { .init(name: "right_arrow_disabled_24pt", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `right_black_arrow`.
    var right_black_arrow: RswiftResources.ImageResource { .init(name: "right_black_arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `role-icon`.
    var roleIcon: RswiftResources.ImageResource { .init(name: "role-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `satelite_black`.
    var satelite_black: RswiftResources.ImageResource { .init(name: "satelite_black", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `satellite`.
    var satellite: RswiftResources.ImageResource { .init(name: "satellite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `search-icon`.
    var searchIcon: RswiftResources.ImageResource { .init(name: "search-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `searchBackArrow`.
    var searchBackArrow: RswiftResources.ImageResource { .init(name: "searchBackArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `searchCloseIcon`.
    var searchCloseIcon: RswiftResources.ImageResource { .init(name: "searchCloseIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `settingsIcon`.
    var settingsIcon: RswiftResources.ImageResource { .init(name: "settingsIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `share`.
    var share: RswiftResources.ImageResource { .init(name: "share", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `shareGreen`.
    var shareGreen: RswiftResources.ImageResource { .init(name: "shareGreen", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `showTag`.
    var showTag: RswiftResources.ImageResource { .init(name: "showTag", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tabFieldsSelected`.
    var tabFieldsSelected: RswiftResources.ImageResource { .init(name: "tabFieldsSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tabFieldsUnselected`.
    var tabFieldsUnselected: RswiftResources.ImageResource { .init(name: "tabFieldsUnselected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tabInsightsSelected`.
    var tabInsightsSelected: RswiftResources.ImageResource { .init(name: "tabInsightsSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tabInsightsUnselected`.
    var tabInsightsUnselected: RswiftResources.ImageResource { .init(name: "tabInsightsUnselected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tabProfileSelected`.
    var tabProfileSelected: RswiftResources.ImageResource { .init(name: "tabProfileSelected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tabProfileUnselected`.
    var tabProfileUnselected: RswiftResources.ImageResource { .init(name: "tabProfileUnselected", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `team`.
    var team: RswiftResources.ImageResource { .init(name: "team", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `terms_image`.
    var terms_image: RswiftResources.ImageResource { .init(name: "terms_image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `triangle`.
    var triangle: RswiftResources.ImageResource { .init(name: "triangle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `valleyLogo`.
    var valleyLogo: RswiftResources.ImageResource { .init(name: "valleyLogo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `valleyLogoBlack`.
    var valleyLogoBlack: RswiftResources.ImageResource { .init(name: "valleyLogoBlack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `valley_powered_by_prospera`.
    var valley_powered_by_prospera: RswiftResources.ImageResource { .init(name: "valley_powered_by_prospera", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `valley_powered_by_prospera_white`.
    var valley_powered_by_prospera_white: RswiftResources.ImageResource { .init(name: "valley_powered_by_prospera_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `walk-through-image`.
    var walkThroughImage: RswiftResources.ImageResource { .init(name: "walk-through-image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `walkthroughPage0`.
    var walkthroughPage0: RswiftResources.ImageResource { .init(name: "walkthroughPage0", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `walkthroughPage1`.
    var walkthroughPage1: RswiftResources.ImageResource { .init(name: "walkthroughPage1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `walkthroughPage2`.
    var walkthroughPage2: RswiftResources.ImageResource { .init(name: "walkthroughPage2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `walkthroughPage3`.
    var walkthroughPage3: RswiftResources.ImageResource { .init(name: "walkthroughPage3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `wide_black_back_arrow`.
    var wide_black_back_arrow: RswiftResources.ImageResource { .init(name: "wide_black_back_arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    let apsEnvironment: String = "development"
    let comAppleDeveloperAssociatedDomains = comAppleDeveloperAssociatedDomains()
    struct comAppleDeveloperAssociatedDomains {
      let applinksGrowersOProsperaAg: String = "applinks:growers.o.prospera.ag"
      let applinksGrowersQaOProsperaAg: String = "applinks:growers-qa.o.prospera.ag"
      let applinksGrowersStagingOProsperaAg: String = "applinks:growers-staging.o.prospera.ag"
      let applinksLViProsperaAg: String = "applinks:l.vi.prospera.ag"
      let applinksLViQaProsperaAg: String = "applinks:l.vi-qa.prospera.ag"
      let applinksLViStagingProsperaAg: String = "applinks:l.vi-staging.prospera.ag"
      let applinksLinksViProsperaAg: String = "applinks:links.vi.prospera.ag"
      let applinksLinksViQaProsperaAg: String = "applinks:links.vi-qa.prospera.ag"
      let applinksLinksViStagingProsperaAg: String = "applinks:links.vi-staging.prospera.ag"
      let applinksMValleyinsightsProsperaAg: String = "applinks:m.valleyinsights.prospera.ag"
      let applinksMValleyinsightsQaProsperaAg: String = "applinks:m.valleyinsights-qa.prospera.ag"
      let applinksMValleyinsightsStagingProsperaAg: String = "applinks:m.valleyinsights-staging.prospera.ag"
      let applinksMViProsperaAg: String = "applinks:m.vi.prospera.ag"
      let applinksMViQaProsperaAg: String = "applinks:m.vi-qa.prospera.ag"
      let applinksMViStagingProsperaAg: String = "applinks:m.vi-staging.prospera.ag"
      let applinksValleyinsightsProsperaAg: String = "applinks:valleyinsights.prospera.ag"
      let applinksValleyinsightsQaProsperaAg: String = "applinks:valleyinsights-qa.prospera.ag"
      let applinksValleyinsightsStagingProsperaAg: String = "applinks:valleyinsights-staging.prospera.ag"
      let applinksViProsperaAg: String = "applinks:vi.prospera.ag"
      let applinksViQaProsperaAg: String = "applinks:vi-qa.prospera.ag"
      let applinksViStagingProsperaAg: String = "applinks:vi-staging.prospera.ag"
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `Averta-Bold`.
    var avertaBold: RswiftResources.FontResource { .init(name: "Averta-Bold", bundle: bundle, filename: "Averta-Bold.ttf") }

    /// Font `Averta-Light`.
    var avertaLight: RswiftResources.FontResource { .init(name: "Averta-Light", bundle: bundle, filename: "Averta-Light.ttf") }

    /// Font `Averta-Regular`.
    var avertaRegular: RswiftResources.FontResource { .init(name: "Averta-Regular", bundle: bundle, filename: "Averta-Regular.ttf") }

    /// Font `Averta-Semibold`.
    var avertaSemibold: RswiftResources.FontResource { .init(name: "Averta-Semibold", bundle: bundle, filename: "Averta-Semibold.ttf") }

    /// Font `Denim-Bold`.
    var denimBold: RswiftResources.FontResource { .init(name: "Denim-Bold", bundle: bundle, filename: "Denim-Bold.otf") }

    /// Font `Denim-Medium`.
    var denimMedium: RswiftResources.FontResource { .init(name: "Denim-Medium", bundle: bundle, filename: "Denim-Medium.otf") }

    /// Font `Denim-Regular`.
    var denimRegular: RswiftResources.FontResource { .init(name: "Denim-Regular", bundle: bundle, filename: "Denim.otf") }

    /// Font `Denim-SemiBold`.
    var denimSemiBold: RswiftResources.FontResource { .init(name: "Denim-SemiBold", bundle: bundle, filename: "Denim-Semi-Bold.otf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [avertaBold, avertaLight, avertaRegular, avertaSemibold, denimBold, denimMedium, denimRegular, denimSemiBold].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 11 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `Averta-Bold.ttf`.
    var avertaBoldTtf: RswiftResources.FileResource { .init(name: "Averta-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Averta-Light.ttf`.
    var avertaLightTtf: RswiftResources.FileResource { .init(name: "Averta-Light", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Averta-Regular.ttf`.
    var avertaRegularTtf: RswiftResources.FileResource { .init(name: "Averta-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Averta-Semibold.ttf`.
    var avertaSemiboldTtf: RswiftResources.FileResource { .init(name: "Averta-Semibold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Denim-Bold.otf`.
    var denimBoldOtf: RswiftResources.FileResource { .init(name: "Denim-Bold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Denim-Medium.otf`.
    var denimMediumOtf: RswiftResources.FileResource { .init(name: "Denim-Medium", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Denim-Semi-Bold.otf`.
    var denimSemiBoldOtf: RswiftResources.FileResource { .init(name: "Denim-Semi-Bold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Denim.otf`.
    var denimOtf: RswiftResources.FileResource { .init(name: "Denim", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `GoogleService-Info.plist`.
    var googleServiceInfoPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `RemoteConfigDefaults.plist`.
    var remoteConfigDefaultsPlist: RswiftResources.FileResource { .init(name: "RemoteConfigDefaults", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `compare_gif.gif`.
    var compare_gifGif: RswiftResources.FileResource { .init(name: "compare_gif", pathExtension: "gif", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.id` struct is generated, and contains static references to 28 accessibility identifiers.
  struct id {
    let accountLanguageCell = accountLanguageCell()
    let analysisInsightCell = analysisInsightCell()
    let analysisLayerCell = analysisLayerCell()
    let appChipsList = appChipsList()
    let basicPopupViewController = basicPopupViewController()
    let customTabBar = customTabBar()
    let datesFilterViewController = datesFilterViewController()
    let enterCodeView = enterCodeView()
    let enterPhoneView = enterPhoneView()
    let errorViewController = errorViewController()
    let feedbackViewController = feedbackViewController()
    let helpCenterCell = helpCenterCell()
    let imageryPopupCellView = imageryPopupCellView()
    let impersonationView = impersonationView()
    let inboxListViewController = inboxListViewController()
    let insightDrawerViewController = insightDrawerViewController()
    let insightViewCell = insightViewCell()
    let insightViewController = insightViewController()
    let johnDeereCell = johnDeereCell()
    let layerGuideCell = layerGuideCell()
    let layerGuideViewController = layerGuideViewController()
    let loginViewController = loginViewController()
    let logoutCell = logoutCell()
    let notificationCell = notificationCell()
    let updatePopUpViewController = updatePopUpViewController()
    let welcomeViewController = welcomeViewController()
    let yourAccountCell = yourAccountCell()
    let yourRollCell = yourRollCell()

    /// This `_R.id.accountLanguageCell` struct is generated, and contains static references to 1 accessibility identifiers.
    struct accountLanguageCell {

      /// Accessibility identifier `notificationCellMainText`.
      let notificationCellMainText = "notificationCellMainText"
    }

    /// This `_R.id.analysisInsightCell` struct is generated, and contains static references to 3 accessibility identifiers.
    struct analysisInsightCell {

      /// Accessibility identifier `InsightViewCellImage`.
      let insightViewCellImage = "InsightViewCellImage"

      /// Accessibility identifier `InsightViewCellSubtitle`.
      let insightViewCellSubtitle = "InsightViewCellSubtitle"

      /// Accessibility identifier `InsightViewCellTitle`.
      let insightViewCellTitle = "InsightViewCellTitle"
    }

    /// This `_R.id.analysisLayerCell` struct is generated, and contains static references to 2 accessibility identifiers.
    struct analysisLayerCell {

      /// Accessibility identifier `analysisLayerImage`.
      let analysisLayerImage = "analysisLayerImage"

      /// Accessibility identifier `analysisLayerText`.
      let analysisLayerText = "analysisLayerText"
    }

    /// This `_R.id.appChipsList` struct is generated, and contains static references to 1 accessibility identifiers.
    struct appChipsList {

      /// Accessibility identifier `FeedbackAnswerTags`.
      let feedbackAnswerTags = "FeedbackAnswerTags"
    }

    /// This `_R.id.basicPopupViewController` struct is generated, and contains static references to 4 accessibility identifiers.
    struct basicPopupViewController {

      /// Accessibility identifier `basic_pop_up_no_btn`.
      let basic_pop_up_no_btn = "basic_pop_up_no_btn"

      /// Accessibility identifier `basic_pop_up_subtitle`.
      let basic_pop_up_subtitle = "basic_pop_up_subtitle"

      /// Accessibility identifier `basic_pop_up_title`.
      let basic_pop_up_title = "basic_pop_up_title"

      /// Accessibility identifier `basic_pop_up_yes_btn`.
      let basic_pop_up_yes_btn = "basic_pop_up_yes_btn"
    }

    /// This `_R.id.customTabBar` struct is generated, and contains static references to 2 accessibility identifiers.
    struct customTabBar {

      /// Accessibility identifier `TabBarInsights`.
      let tabBarInsights = "TabBarInsights"

      /// Accessibility identifier `TabBarMyFields`.
      let tabBarMyFields = "TabBarMyFields"
    }

    /// This `_R.id.datesFilterViewController` struct is generated, and contains static references to 2 accessibility identifiers.
    struct datesFilterViewController {

      /// Accessibility identifier `datesFilterCloseButton`.
      let datesFilterCloseButton = "datesFilterCloseButton"

      /// Accessibility identifier `datesFilterViewSlider`.
      let datesFilterViewSlider = "datesFilterViewSlider"
    }

    /// This `_R.id.enterCodeView` struct is generated, and contains static references to 18 accessibility identifiers.
    struct enterCodeView {

      /// Accessibility identifier `EnterCodeDidNotReceiveLabel`.
      let enterCodeDidNotReceiveLabel = "EnterCodeDidNotReceiveLabel"

      /// Accessibility identifier `EnterCodeEnterLabel`.
      let enterCodeEnterLabel = "EnterCodeEnterLabel"

      /// Accessibility identifier `EnterCodeErrorLabel`.
      let enterCodeErrorLabel = "EnterCodeErrorLabel"

      /// Accessibility identifier `EnterCodeFOrthNumberLabel`.
      let enterCodeFOrthNumberLabel = "EnterCodeFOrthNumberLabel"

      /// Accessibility identifier `EnterCodeFifthNumberLabel`.
      let enterCodeFifthNumberLabel = "EnterCodeFifthNumberLabel"

      /// Accessibility identifier `EnterCodeFifthNumberView`.
      let enterCodeFifthNumberView = "EnterCodeFifthNumberView"

      /// Accessibility identifier `EnterCodeFirstNumberLabel`.
      let enterCodeFirstNumberLabel = "EnterCodeFirstNumberLabel"

      /// Accessibility identifier `EnterCodeFirstNumberView`.
      let enterCodeFirstNumberView = "EnterCodeFirstNumberView"

      /// Accessibility identifier `EnterCodeForthNumberVIew`.
      let enterCodeForthNumberVIew = "EnterCodeForthNumberVIew"

      /// Accessibility identifier `EnterCodeInfoLabel`.
      let enterCodeInfoLabel = "EnterCodeInfoLabel"

      /// Accessibility identifier `EnterCodeLoginButton`.
      let enterCodeLoginButton = "EnterCodeLoginButton"

      /// Accessibility identifier `EnterCodeResendCodeLabel`.
      let enterCodeResendCodeLabel = "EnterCodeResendCodeLabel"

      /// Accessibility identifier `EnterCodeSecondNUmberLabel`.
      let enterCodeSecondNUmberLabel = "EnterCodeSecondNUmberLabel"

      /// Accessibility identifier `EnterCodeSecondNumberView`.
      let enterCodeSecondNumberView = "EnterCodeSecondNumberView"

      /// Accessibility identifier `EnterCodeSixthNumberLabel`.
      let enterCodeSixthNumberLabel = "EnterCodeSixthNumberLabel"

      /// Accessibility identifier `EnterCodeSixthNumberView`.
      let enterCodeSixthNumberView = "EnterCodeSixthNumberView"

      /// Accessibility identifier `EnterCodeThirdNumberLabel`.
      let enterCodeThirdNumberLabel = "EnterCodeThirdNumberLabel"

      /// Accessibility identifier `EnterCodeThirdNumberView`.
      let enterCodeThirdNumberView = "EnterCodeThirdNumberView"
    }

    /// This `_R.id.enterPhoneView` struct is generated, and contains static references to 9 accessibility identifiers.
    struct enterPhoneView {

      /// Accessibility identifier `EnterPhoneEnterLabel`.
      let enterPhoneEnterLabel = "EnterPhoneEnterLabel"

      /// Accessibility identifier `EnterPhoneErrorLabel`.
      let enterPhoneErrorLabel = "EnterPhoneErrorLabel"

      /// Accessibility identifier `EnterPhoneMessageLabel`.
      let enterPhoneMessageLabel = "EnterPhoneMessageLabel"

      /// Accessibility identifier `EnterPhonePrefixArrow`.
      let enterPhonePrefixArrow = "EnterPhonePrefixArrow"

      /// Accessibility identifier `EnterPhonePrefixLabel`.
      let enterPhonePrefixLabel = "EnterPhonePrefixLabel"

      /// Accessibility identifier `EnterPhonePrefixView`.
      let enterPhonePrefixView = "EnterPhonePrefixView"

      /// Accessibility identifier `EnterPhoneSendCodeButton`.
      let enterPhoneSendCodeButton = "EnterPhoneSendCodeButton"

      /// Accessibility identifier `EnterPhoneSuffixLabel`.
      let enterPhoneSuffixLabel = "EnterPhoneSuffixLabel"

      /// Accessibility identifier `EnterPhoneSuffixView`.
      let enterPhoneSuffixView = "EnterPhoneSuffixView"
    }

    /// This `_R.id.errorViewController` struct is generated, and contains static references to 3 accessibility identifiers.
    struct errorViewController {

      /// Accessibility identifier `InboxListErrorSubtitle`.
      let inboxListErrorSubtitle = "InboxListErrorSubtitle"

      /// Accessibility identifier `InboxListErrorTitle`.
      let inboxListErrorTitle = "InboxListErrorTitle"

      /// Accessibility identifier `InboxListReloadButton`.
      let inboxListReloadButton = "InboxListReloadButton"
    }

    /// This `_R.id.feedbackViewController` struct is generated, and contains static references to 2 accessibility identifiers.
    struct feedbackViewController {

      /// Accessibility identifier `FeedbackAnswerTags`.
      let feedbackAnswerTags = "FeedbackAnswerTags"

      /// Accessibility identifier `FeedbackCloseButton`.
      let feedbackCloseButton = "FeedbackCloseButton"
    }

    /// This `_R.id.helpCenterCell` struct is generated, and contains static references to 2 accessibility identifiers.
    struct helpCenterCell {

      /// Accessibility identifier `HelpCenterArrow`.
      let helpCenterArrow = "HelpCenterArrow"

      /// Accessibility identifier `HelpCenterText`.
      let helpCenterText = "HelpCenterText"
    }

    /// This `_R.id.imageryPopupCellView` struct is generated, and contains static references to 3 accessibility identifiers.
    struct imageryPopupCellView {

      /// Accessibility identifier `ImageryPopUpArrow`.
      let imageryPopUpArrow = "ImageryPopUpArrow"

      /// Accessibility identifier `ImageryPopUpImage`.
      let imageryPopUpImage = "ImageryPopUpImage"

      /// Accessibility identifier `ImageryPopUpTitle`.
      let imageryPopUpTitle = "ImageryPopUpTitle"
    }

    /// This `_R.id.impersonationView` struct is generated, and contains static references to 11 accessibility identifiers.
    struct impersonationView {

      /// Accessibility identifier `EnterPhoneAsYourselfButton`.
      let enterPhoneAsYourselfButton = "EnterPhoneAsYourselfButton"

      /// Accessibility identifier `EnterPhoneImpersonationButton`.
      let enterPhoneImpersonationButton = "EnterPhoneImpersonationButton"

      /// Accessibility identifier `EnterPhoneImpersonationEnterLabel`.
      let enterPhoneImpersonationEnterLabel = "EnterPhoneImpersonationEnterLabel"

      /// Accessibility identifier `EnterPhoneImpersonationErrorLabel`.
      let enterPhoneImpersonationErrorLabel = "EnterPhoneImpersonationErrorLabel"

      /// Accessibility identifier `EnterPhoneImpersonationMessageLabel`.
      let enterPhoneImpersonationMessageLabel = "EnterPhoneImpersonationMessageLabel"

      /// Accessibility identifier `EnterPhoneMessageLabel`.
      let enterPhoneMessageLabel = "EnterPhoneMessageLabel"

      /// Accessibility identifier `EnterPhonePrefixArrow`.
      let enterPhonePrefixArrow = "EnterPhonePrefixArrow"

      /// Accessibility identifier `EnterPhonePrefixLabel`.
      let enterPhonePrefixLabel = "EnterPhonePrefixLabel"

      /// Accessibility identifier `EnterPhonePrefixView`.
      let enterPhonePrefixView = "EnterPhonePrefixView"

      /// Accessibility identifier `EnterPhoneSuffixLabel`.
      let enterPhoneSuffixLabel = "EnterPhoneSuffixLabel"

      /// Accessibility identifier `EnterPhoneSuffixView`.
      let enterPhoneSuffixView = "EnterPhoneSuffixView"
    }

    /// This `_R.id.inboxListViewController` struct is generated, and contains static references to 6 accessibility identifiers.
    struct inboxListViewController {

      /// Accessibility identifier `InboxListEmptySubtitle`.
      let inboxListEmptySubtitle = "InboxListEmptySubtitle"

      /// Accessibility identifier `InboxListEmptyTitle`.
      let inboxListEmptyTitle = "InboxListEmptyTitle"

      /// Accessibility identifier `InboxListErrorSubtitle`.
      let inboxListErrorSubtitle = "InboxListErrorSubtitle"

      /// Accessibility identifier `InboxListErrorTitle`.
      let inboxListErrorTitle = "InboxListErrorTitle"

      /// Accessibility identifier `InboxListLoadingTitle`.
      let inboxListLoadingTitle = "InboxListLoadingTitle"

      /// Accessibility identifier `InboxListReloadButton`.
      let inboxListReloadButton = "InboxListReloadButton"
    }

    /// This `_R.id.insightDrawerViewController` struct is generated, and contains static references to 15 accessibility identifiers.
    struct insightDrawerViewController {

      /// Accessibility identifier `FakeFieldName`.
      let fakeFieldName = "FakeFieldName"

      /// Accessibility identifier `InsightDrawerSubject`.
      let insightDrawerSubject = "InsightDrawerSubject"

      /// Accessibility identifier `InsightDrawerTakeAction`.
      let insightDrawerTakeAction = "InsightDrawerTakeAction"

      /// Accessibility identifier `InsightsDrawerAffectedArea`.
      let insightsDrawerAffectedArea = "InsightsDrawerAffectedArea"

      /// Accessibility identifier `InsightsDrawerAnalayzeButton`.
      let insightsDrawerAnalayzeButton = "InsightsDrawerAnalayzeButton"

      /// Accessibility identifier `InsightsDrawerDescription`.
      let insightsDrawerDescription = "InsightsDrawerDescription"

      /// Accessibility identifier `InsightsDrawerFarmName`.
      let insightsDrawerFarmName = "InsightsDrawerFarmName"

      /// Accessibility identifier `InsightsDrawerFeedbackStars`.
      let insightsDrawerFeedbackStars = "InsightsDrawerFeedbackStars"

      /// Accessibility identifier `InsightsDrawerFieldName`.
      let insightsDrawerFieldName = "InsightsDrawerFieldName"

      /// Accessibility identifier `InsightsDrawerImageTaken`.
      let insightsDrawerImageTaken = "InsightsDrawerImageTaken"

      /// Accessibility identifier `InsightsDrawerMarkUnreadButton`.
      let insightsDrawerMarkUnreadButton = "InsightsDrawerMarkUnreadButton"

      /// Accessibility identifier `InsightsDrawerShareButton`.
      let insightsDrawerShareButton = "InsightsDrawerShareButton"

      /// Accessibility identifier `InsightsDrawerValleyButton`.
      let insightsDrawerValleyButton = "InsightsDrawerValleyButton"

      /// Accessibility identifier `feedbbackLabel`.
      let feedbbackLabel = "feedbbackLabel"

      /// Accessibility identifier `thankYouLabel`.
      let thankYouLabel = "thankYouLabel"
    }

    /// This `_R.id.insightViewCell` struct is generated, and contains static references to 5 accessibility identifiers.
    struct insightViewCell {

      /// Accessibility identifier `FeedbackAnswerTags`.
      let feedbackAnswerTags = "FeedbackAnswerTags"

      /// Accessibility identifier `InsightViewCellImage`.
      let insightViewCellImage = "InsightViewCellImage"

      /// Accessibility identifier `InsightViewCellSubtitle`.
      let insightViewCellSubtitle = "InsightViewCellSubtitle"

      /// Accessibility identifier `InsightViewCellTimeAgo`.
      let insightViewCellTimeAgo = "InsightViewCellTimeAgo"

      /// Accessibility identifier `InsightViewCellTitle`.
      let insightViewCellTitle = "InsightViewCellTitle"
    }

    /// This `_R.id.insightViewController` struct is generated, and contains static references to 1 accessibility identifiers.
    struct insightViewController {

      /// Accessibility identifier `InsightBackButton`.
      let insightBackButton = "InsightBackButton"
    }

    /// This `_R.id.johnDeereCell` struct is generated, and contains static references to 3 accessibility identifiers.
    struct johnDeereCell {

      /// Accessibility identifier `JohnDeereCellConnetButton`.
      let johnDeereCellConnetButton = "JohnDeereCellConnetButton"

      /// Accessibility identifier `JohnDeereCellMainText`.
      let johnDeereCellMainText = "JohnDeereCellMainText"

      /// Accessibility identifier `JohnDeereCellSecondText`.
      let johnDeereCellSecondText = "JohnDeereCellSecondText"
    }

    /// This `_R.id.layerGuideCell` struct is generated, and contains static references to 7 accessibility identifiers.
    struct layerGuideCell {

      /// Accessibility identifier `LayerGuideColorMapHighLabel`.
      let layerGuideColorMapHighLabel = "LayerGuideColorMapHighLabel"

      /// Accessibility identifier `LayerGuideColorMapImage`.
      let layerGuideColorMapImage = "LayerGuideColorMapImage"

      /// Accessibility identifier `LayerGuideColorMapLowLabel`.
      let layerGuideColorMapLowLabel = "LayerGuideColorMapLowLabel"

      /// Accessibility identifier `LayerGuideExplanationLabel`.
      let layerGuideExplanationLabel = "LayerGuideExplanationLabel"

      /// Accessibility identifier `LayerGuideImage`.
      let layerGuideImage = "LayerGuideImage"

      /// Accessibility identifier `LayerGuideLayerNameLabel`.
      let layerGuideLayerNameLabel = "LayerGuideLayerNameLabel"

      /// Accessibility identifier `LayerGuideLearnMoreLabel`.
      let layerGuideLearnMoreLabel = "LayerGuideLearnMoreLabel"
    }

    /// This `_R.id.layerGuideViewController` struct is generated, and contains static references to 1 accessibility identifiers.
    struct layerGuideViewController {

      /// Accessibility identifier `LayerGuideGotItButton`.
      let layerGuideGotItButton = "LayerGuideGotItButton"
    }

    /// This `_R.id.loginViewController` struct is generated, and contains static references to 2 accessibility identifiers.
    struct loginViewController {

      /// Accessibility identifier `LoginBackButton`.
      let loginBackButton = "LoginBackButton"

      /// Accessibility identifier `LoginKeyboard`.
      let loginKeyboard = "LoginKeyboard"
    }

    /// This `_R.id.logoutCell` struct is generated, and contains static references to 1 accessibility identifiers.
    struct logoutCell {

      /// Accessibility identifier `LogoutCellText`.
      let logoutCellText = "LogoutCellText"
    }

    /// This `_R.id.notificationCell` struct is generated, and contains static references to 7 accessibility identifiers.
    struct notificationCell {

      /// Accessibility identifier `notificationCellInfoText`.
      let notificationCellInfoText = "notificationCellInfoText"

      /// Accessibility identifier `notificationCellMainText`.
      let notificationCellMainText = "notificationCellMainText"

      /// Accessibility identifier `notificationCellPushSms`.
      let notificationCellPushSms = "notificationCellPushSms"

      /// Accessibility identifier `notificationCellSecondText`.
      let notificationCellSecondText = "notificationCellSecondText"

      /// Accessibility identifier `notificationCellSmsToggleMask`.
      let notificationCellSmsToggleMask = "notificationCellSmsToggleMask"

      /// Accessibility identifier `notificationCellToggleButton`.
      let notificationCellToggleButton = "notificationCellToggleButton"

      /// Accessibility identifier `notificationCellToggleSwitch`.
      let notificationCellToggleSwitch = "notificationCellToggleSwitch"
    }

    /// This `_R.id.updatePopUpViewController` struct is generated, and contains static references to 2 accessibility identifiers.
    struct updatePopUpViewController {

      /// Accessibility identifier `PopupAppStoreContentTitle`.
      let popupAppStoreContentTitle = "PopupAppStoreContentTitle"

      /// Accessibility identifier `PopupAppStoreMainTitle`.
      let popupAppStoreMainTitle = "PopupAppStoreMainTitle"
    }

    /// This `_R.id.welcomeViewController` struct is generated, and contains static references to 2 accessibility identifiers.
    struct welcomeViewController {

      /// Accessibility identifier `WelcomeLoginWithPhoneButton`.
      let welcomeLoginWithPhoneButton = "WelcomeLoginWithPhoneButton"

      /// Accessibility identifier `WelcomeValleyPoweredImage`.
      let welcomeValleyPoweredImage = "WelcomeValleyPoweredImage"
    }

    /// This `_R.id.yourAccountCell` struct is generated, and contains static references to 2 accessibility identifiers.
    struct yourAccountCell {

      /// Accessibility identifier `ValleyTeamCellMainText`.
      let valleyTeamCellMainText = "ValleyTeamCellMainText"

      /// Accessibility identifier `ValleyTeamCellSecondText`.
      let valleyTeamCellSecondText = "ValleyTeamCellSecondText"
    }

    /// This `_R.id.yourRollCell` struct is generated, and contains static references to 1 accessibility identifiers.
    struct yourRollCell {

      /// Accessibility identifier `notificationCellMainText`.
      let notificationCellMainText = "notificationCellMainText"
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 91 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `AccountLanguageCell`.
    var accountLanguageCell: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AccountLanguageCell", bundle: bundle) }

    /// Nib `AccountVersionCell`.
    var accountVersionCell: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AccountVersionCell", bundle: bundle) }

    /// Nib `AnalysisDateCell`.
    var analysisDateCell: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AnalysisDateCell", bundle: bundle) }

    /// Nib `AnalysisInsightCell`.
    var analysisInsightCell: RswiftResources.NibReferenceReuseIdentifier<AnalysisInsightCell, AnalysisInsightCell> { .init(name: "AnalysisInsightCell", bundle: bundle, identifier: "AnalysisInsightCell") }

    /// Nib `AnalysisLayerCell`.
    var analysisLayerCell: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AnalysisLayerCell", bundle: bundle) }

    /// Nib `AnalysisTabItem`.
    var analysisTabItem: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AnalysisTabItem", bundle: bundle) }

    /// Nib `AnalysisTabs`.
    var analysisTabs: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AnalysisTabs", bundle: bundle) }

    /// Nib `AppCalendarCell`.
    var appCalendarCell: RswiftResources.NibReferenceReuseIdentifier<AppCalendarCell, AppCalendarCell> { .init(name: "AppCalendarCell", bundle: bundle, identifier: "AppCalendarCell") }

    /// Nib `AppCalendarCollection`.
    var appCalendarCollection: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AppCalendarCollection", bundle: bundle) }

    /// Nib `AppCalendarWithArrows`.
    var appCalendarWithArrows: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AppCalendarWithArrows", bundle: bundle) }

    /// Nib `AppCheckBox`.
    var appCheckBox: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AppCheckBox", bundle: bundle) }

    /// Nib `AppChipsList`.
    var appChipsList: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AppChipsList", bundle: bundle) }

    /// Nib `AppGalleryImageCell`.
    var appGalleryImageCell: RswiftResources.NibReferenceReuseIdentifier<AppGalleryImageCell, AppGalleryImageCell> { .init(name: "AppGalleryImageCell", bundle: bundle, identifier: "AppGalleryImageCell") }

    /// Nib `AppImageGallery`.
    var appImageGallery: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AppImageGallery", bundle: bundle) }

    /// Nib `AppTagView`.
    var appTagView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "AppTagView", bundle: bundle) }

    /// Nib `AppWalkthroughCell`.
    var appWalkthroughCell: RswiftResources.NibReferenceReuseIdentifier<AppWalkthroughCell, AppWalkthroughCell> { .init(name: "AppWalkthroughCell", bundle: bundle, identifier: "AppWalkthroughCell") }

    /// Nib `CloudButton`.
    var cloudButton: RswiftResources.NibReference<UIKit.UIView> { .init(name: "CloudButton", bundle: bundle) }

    /// Nib `CompareCell`.
    var compareCell: RswiftResources.NibReference<CompareCell> { .init(name: "CompareCell", bundle: bundle) }

    /// Nib `ContainerHeader`.
    var containerHeader: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ContainerHeader", bundle: bundle) }

    /// Nib `CustomTabBar`.
    var customTabBar: RswiftResources.NibReference<UIKit.UIView> { .init(name: "CustomTabBar", bundle: bundle) }

    /// Nib `EmptyLocationOverviewCell`.
    var emptyLocationOverviewCell: RswiftResources.NibReferenceReuseIdentifier<EmptyLocationOverviewCell, EmptyLocationOverviewCell> { .init(name: "EmptyLocationOverviewCell", bundle: bundle, identifier: "EmptyLocationOverviewCell") }

    /// Nib `EnableDisableButton`.
    var enableDisableButton: RswiftResources.NibReference<DoneButton> { .init(name: "EnableDisableButton", bundle: bundle) }

    /// Nib `EnhanceDescriptionTableCell`.
    var enhanceDescriptionTableCell: RswiftResources.NibReferenceReuseIdentifier<EnhanceDescriptionTableCell, EnhanceDescriptionTableCell> { .init(name: "EnhanceDescriptionTableCell", bundle: bundle, identifier: "EnhanceDescriptionTableCell") }

    /// Nib `EnhanceImagesTableCell`.
    var enhanceImagesTableCell: RswiftResources.NibReferenceReuseIdentifier<EnhanceImagesTableCell, EnhanceImagesTableCell> { .init(name: "EnhanceImagesTableCell", bundle: bundle, identifier: "EnhanceImagesTableCell") }

    /// Nib `EnhanceLocationCell`.
    var enhanceLocationCell: RswiftResources.NibReferenceReuseIdentifier<EnhanceLocationCell, EnhanceLocationCell> { .init(name: "EnhanceLocationCell", bundle: bundle, identifier: "EnhanceLocationCell") }

    /// Nib `EnhanceSectionHeaderView`.
    var enhanceSectionHeaderView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EnhanceSectionHeaderView", bundle: bundle) }

    /// Nib `EnhanceSeverityHeaderView`.
    var enhanceSeverityHeaderView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EnhanceSeverityHeaderView", bundle: bundle) }

    /// Nib `EnhanceSeverityInnerTableCell`.
    var enhanceSeverityInnerTableCell: RswiftResources.NibReferenceReuseIdentifier<EnhanceSeverityInnerTableCell, EnhanceSeverityInnerTableCell> { .init(name: "EnhanceSeverityInnerTableCell", bundle: bundle, identifier: "EnhanceSeverityInnerTableCell") }

    /// Nib `EnhanceSeverityTableCell`.
    var enhanceSeverityTableCell: RswiftResources.NibReferenceReuseIdentifier<EnhanceSeverityTableCell, EnhanceSeverityTableCell> { .init(name: "EnhanceSeverityTableCell", bundle: bundle, identifier: "EnhanceSeverityTableCell") }

    /// Nib `EnhanceTagImageViewCell`.
    var enhanceTagImageViewCell: RswiftResources.NibReferenceReuseIdentifier<EnhanceTagImageViewCell, EnhanceTagImageViewCell> { .init(name: "EnhanceTagImageViewCell", bundle: bundle, identifier: "EnhanceTagImageViewCell") }

    /// Nib `EnterCodeView`.
    var enterCodeView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EnterCodeView", bundle: bundle) }

    /// Nib `EnterPhoneView`.
    var enterPhoneView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "EnterPhoneView", bundle: bundle) }

    /// Nib `FarmSelectCell`.
    var farmSelectCell: RswiftResources.NibReferenceReuseIdentifier<FarmSelectCell, FarmSelectCell> { .init(name: "FarmSelectCell", bundle: bundle, identifier: "FarmSelectCell") }

    /// Nib `FeedSectionHeaderView`.
    var feedSectionHeaderView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FeedSectionHeaderView", bundle: bundle) }

    /// Nib `FieldCategoryCell`.
    var fieldCategoryCell: RswiftResources.NibReferenceReuseIdentifier<FieldCategoryCell, FieldCategoryCell> { .init(name: "FieldCategoryCell", bundle: bundle, identifier: "FieldCategoryCell") }

    /// Nib `FieldCellShimmerView`.
    var fieldCellShimmerView: RswiftResources.NibReferenceReuseIdentifier<FieldCellShimmerView, FieldCellShimmerView> { .init(name: "FieldCellShimmerView", bundle: bundle, identifier: "FieldCellShimmerView") }

    /// Nib `FieldCellView`.
    var fieldCellView: RswiftResources.NibReferenceReuseIdentifier<FieldCellView, FieldCellView> { .init(name: "FieldCellView", bundle: bundle, identifier: "FieldCellView") }

    /// Nib `FieldImageView`.
    var fieldImageView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FieldImageView", bundle: bundle) }

    /// Nib `FieldImageryCell`.
    var fieldImageryCell: RswiftResources.NibReferenceReuseIdentifier<FieldImageryCell, FieldImageryCell> { .init(name: "FieldImageryCell", bundle: bundle, identifier: "FieldImageryCell") }

    /// Nib `FieldIrrigationCell`.
    var fieldIrrigationCell: RswiftResources.NibReferenceReuseIdentifier<FieldIrrigationCell, FieldIrrigationCell> { .init(name: "FieldIrrigationCell", bundle: bundle, identifier: "FieldIrrigationCell") }

    /// Nib `FieldIrrigationItemCell`.
    var fieldIrrigationItemCell: RswiftResources.NibReferenceReuseIdentifier<FieldIrrigationItemCell, FieldIrrigationItemCell> { .init(name: "FieldIrrigationItemCell", bundle: bundle, identifier: "FieldIrrigationItemCell") }

    /// Nib `FieldsSeachBar`.
    var fieldsSeachBar: RswiftResources.NibReference<UIKit.UIView> { .init(name: "FieldsSeachBar", bundle: bundle) }

    /// Nib `FieldsSectionHeader`.
    var fieldsSectionHeader: RswiftResources.NibReferenceReuseIdentifier<FieldsSectionHeader, FieldsSectionHeader> { .init(name: "FieldsSectionHeader", bundle: bundle, identifier: "FieldsSectionHeader") }

    /// Nib `FieldsSortingCell`.
    var fieldsSortingCell: RswiftResources.NibReferenceReuseIdentifier<FieldsSortingCell, FieldsSortingCell> { .init(name: "FieldsSortingCell", bundle: bundle, identifier: "FieldsSortingCell") }

    /// Nib `GuideCustomView`.
    var guideCustomView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GuideCustomView", bundle: bundle) }

    /// Nib `HelpCenterCell`.
    var helpCenterCell: RswiftResources.NibReference<UIKit.UIView> { .init(name: "HelpCenterCell", bundle: bundle) }

    /// Nib `HighLightCard`.
    var highLightCard: RswiftResources.NibReference<UIKit.UIView> { .init(name: "HighLightCard", bundle: bundle) }

    /// Nib `HighlightBanner`.
    var highlightBanner: RswiftResources.NibReference<UIKit.UIView> { .init(name: "HighlightBanner", bundle: bundle) }

    /// Nib `HighlightCardView`.
    var highlightCardView: RswiftResources.NibReferenceReuseIdentifier<HighlightCardView, HighlightCardView> { .init(name: "HighlightCardView", bundle: bundle, identifier: "HighlightCardView") }

    /// Nib `HighlightEmptyCardView`.
    var highlightEmptyCardView: RswiftResources.NibReferenceReuseIdentifier<HighlightEmptyCardView, HighlightEmptyCardView> { .init(name: "HighlightEmptyCardView", bundle: bundle, identifier: "HighlightEmptyCardView") }

    /// Nib `HighlightHeaderView`.
    var highlightHeaderView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "HighlightHeaderView", bundle: bundle) }

    /// Nib `HighlightPagerTableCell`.
    var highlightPagerTableCell: RswiftResources.NibReferenceReuseIdentifier<HighlightPagerTableCell, HighlightPagerTableCell> { .init(name: "HighlightPagerTableCell", bundle: bundle, identifier: "HighlightPagerTableCell") }

    /// Nib `HighlightSectionHeader`.
    var highlightSectionHeader: RswiftResources.NibReferenceReuseIdentifier<HighlightSectionHeader, HighlightSectionHeader> { .init(name: "HighlightSectionHeader", bundle: bundle, identifier: "HighlightSectionHeader") }

    /// Nib `HighlightsTableCell`.
    var highlightsTableCell: RswiftResources.NibReferenceReuseIdentifier<HighlightsTableCell, HighlightsTableCell> { .init(name: "HighlightsTableCell", bundle: bundle, identifier: "HighlightsTableCell") }

    /// Nib `ImageViewer`.
    var imageViewer: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ImageViewer", bundle: bundle) }

    /// Nib `ImageryPopupCellView`.
    var imageryPopupCellView: RswiftResources.NibReferenceReuseIdentifier<ImageryPopupCellView, ImageryPopupCellView> { .init(name: "ImageryPopupCellView", bundle: bundle, identifier: "ImageryPopupCellView") }

    /// Nib `ImageryViewCell`.
    var imageryViewCell: RswiftResources.NibReferenceReuseIdentifier<ImageryViewCell, ImageryViewCell> { .init(name: "ImageryViewCell", bundle: bundle, identifier: "ImageryViewCell") }

    /// Nib `ImpersonationView`.
    var impersonationView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "ImpersonationView", bundle: bundle) }

    /// Nib `InsightViewCell`.
    var insightViewCell: RswiftResources.NibReferenceReuseIdentifier<InsightViewCell, InsightViewCell> { .init(name: "InsightViewCell", bundle: bundle, identifier: "InsightViewCell") }

    /// Nib `IssueCard`.
    var issueCard: RswiftResources.NibReferenceReuseIdentifier<IssueCard, IssueCard> { .init(name: "IssueCard", bundle: bundle, identifier: "IssueCard") }

    /// Nib `IssueLocationOverviewCell`.
    var issueLocationOverviewCell: RswiftResources.NibReferenceReuseIdentifier<IssueLocationOverviewCell, IssueLocationOverviewCell> { .init(name: "IssueLocationOverviewCell", bundle: bundle, identifier: "IssueLocationOverviewCell") }

    /// Nib `IssueOverviewTableCell`.
    var issueOverviewTableCell: RswiftResources.NibReferenceReuseIdentifier<IssueOverviewTableCell, IssueOverviewTableCell> { .init(name: "IssueOverviewTableCell", bundle: bundle, identifier: "IssueOverviewTableCell") }

    /// Nib `IssueTagImageViewCell`.
    var issueTagImageViewCell: RswiftResources.NibReferenceReuseIdentifier<IssueTagImageViewCell, IssueTagImageViewCell> { .init(name: "IssueTagImageViewCell", bundle: bundle, identifier: "IssueTagImageViewCell") }

    /// Nib `JohnDeereCell`.
    var johnDeereCell: RswiftResources.NibReference<UIKit.UIView> { .init(name: "JohnDeereCell", bundle: bundle) }

    /// Nib `KeyboardView`.
    var keyboardView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "KeyboardView", bundle: bundle) }

    /// Nib `LanguageCell`.
    var languageCell: RswiftResources.NibReferenceReuseIdentifier<LanguageCell, LanguageCell> { .init(name: "LanguageCell", bundle: bundle, identifier: "LanguageCell") }

    /// Nib `LayerGuideCell`.
    var layerGuideCell: RswiftResources.NibReferenceReuseIdentifier<LayerGuideCell, LayerGuideCell> { .init(name: "LayerGuideCell", bundle: bundle, identifier: "LayerGuideCell") }

    /// Nib `LocationInsightPage`.
    var locationInsightPage: RswiftResources.NibReferenceReuseIdentifier<LocationInsightPage, LocationInsightPage> { .init(name: "LocationInsightPage", bundle: bundle, identifier: "LocationInsightPage") }

    /// Nib `LogoutCell`.
    var logoutCell: RswiftResources.NibReference<UIKit.UIView> { .init(name: "LogoutCell", bundle: bundle) }

    /// Nib `NightBadge`.
    var nightBadge: RswiftResources.NibReference<UIKit.UIView> { .init(name: "NightBadge", bundle: bundle) }

    /// Nib `NotificationCell`.
    var notificationCell: RswiftResources.NibReference<UIKit.UIView> { .init(name: "NotificationCell", bundle: bundle) }

    /// Nib `OverviewCell`.
    var overviewCell: RswiftResources.NibReferenceReuseIdentifier<OverviewCell, OverviewCell> { .init(name: "OverviewCell", bundle: bundle, identifier: "OverviewCell") }

    /// Nib `OverviewInfoTableViewCell`.
    var overviewInfoTableViewCell: RswiftResources.NibReferenceReuseIdentifier<OverviewInfoTableViewCell, OverviewInfoTableViewCell> { .init(name: "OverviewInfoTableViewCell", bundle: bundle, identifier: "OverviewInfoTableViewCell") }

    /// Nib `OverviewInformationView`.
    var overviewInformationView: RswiftResources.NibReference<UIKit.UIView> { .init(name: "OverviewInformationView", bundle: bundle) }

    /// Nib `PickerPopupCell`.
    var pickerPopupCell: RswiftResources.NibReferenceReuseIdentifier<PickerPopupCell, PickerPopupCell> { .init(name: "PickerPopupCell", bundle: bundle, identifier: "PickerPopupCell") }

    /// Nib `RangeLocationOverviewStandCountTableCell`.
    var rangeLocationOverviewStandCountTableCell: RswiftResources.NibReferenceReuseIdentifier<RangeLocationOverviewStandCountTableCell, RangeLocationOverviewStandCountTableCell> { .init(name: "RangeLocationOverviewStandCountTableCell", bundle: bundle, identifier: "rangeLocationOverviewStandCountTableCell") }

    /// Nib `RangedLocationOverviewCell`.
    var rangedLocationOverviewCell: RswiftResources.NibReferenceReuseIdentifier<RangedLocationOverviewCell, RangedLocationOverviewCell> { .init(name: "RangedLocationOverviewCell", bundle: bundle, identifier: "RangedLocationOverviewCell") }

    /// Nib `RangedLocationOverviewTableCell`.
    var rangedLocationOverviewTableCell: RswiftResources.NibReferenceReuseIdentifier<RangedLocationOverviewTableCell, RangedLocationOverviewTableCell> { .init(name: "RangedLocationOverviewTableCell", bundle: bundle, identifier: "RangedLocationOverviewTableCell") }

    /// Nib `RequestReportCell`.
    var requestReportCell: RswiftResources.NibReferenceReuseIdentifier<RequestReportCell, RequestReportCell> { .init(name: "RequestReportCell", bundle: bundle, identifier: "RequestReportCell") }

    /// Nib `RoleCell`.
    var roleCell: RswiftResources.NibReferenceReuseIdentifier<RoleCell, RoleCell> { .init(name: "RoleCell", bundle: bundle, identifier: "RoleCell") }

    /// Nib `SGButton`.
    var sgButton: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SGButton", bundle: bundle) }

    /// Nib `SingleIssue`.
    var singleIssue: RswiftResources.NibReference<UIKit.UIView> { .init(name: "SingleIssue", bundle: bundle) }

    /// Nib `SingleIssueCell`.
    var singleIssueCell: RswiftResources.NibReferenceReuseIdentifier<SingleIssueCell, SingleIssueCell> { .init(name: "SingleIssueCell", bundle: bundle, identifier: "SingleIssueCell") }

    /// Nib `SingleIssueIndexedCell`.
    var singleIssueIndexedCell: RswiftResources.NibReferenceReuseIdentifier<SingleIssueIndexedCell, SingleIssueIndexedCell> { .init(name: "SingleIssueIndexedCell", bundle: bundle, identifier: "SingleIssueIndexedCell") }

    /// Nib `SingleIssueIndexedNamedCell`.
    var singleIssueIndexedNamedCell: RswiftResources.NibReferenceReuseIdentifier<SingleIssueIndexedNamedCell, SingleIssueIndexedNamedCell> { .init(name: "SingleIssueIndexedNamedCell", bundle: bundle, identifier: "SingleIssueIndexedNamedCell") }

    /// Nib `SingleLocationDateCell`.
    var singleLocationDateCell: RswiftResources.NibReferenceReuseIdentifier<SingleLocationDateCell, SingleLocationDateCell> { .init(name: "SingleLocationDateCell", bundle: bundle, identifier: "SingleLocationDateCell") }

    /// Nib `SingleLocationImageCell`.
    var singleLocationImageCell: RswiftResources.NibReferenceReuseIdentifier<SingleLocationImageCell, SingleLocationImageCell> { .init(name: "SingleLocationImageCell", bundle: bundle, identifier: "SingleLocationImageCell") }

    /// Nib `SingleLocationOverviewCell`.
    var singleLocationOverviewCell: RswiftResources.NibReferenceReuseIdentifier<SingleLocationOverviewCell, SingleLocationOverviewCell> { .init(name: "SingleLocationOverviewCell", bundle: bundle, identifier: "SingleLocationOverviewCell") }

    /// Nib `TagImageViewCell`.
    var tagImageViewCell: RswiftResources.NibReferenceReuseIdentifier<TagImageViewCell, TagImageViewCell> { .init(name: "TagImageViewCell", bundle: bundle, identifier: "TagImageViewCell") }

    /// Nib `YourAccountCell`.
    var yourAccountCell: RswiftResources.NibReference<UIKit.UIView> { .init(name: "YourAccountCell", bundle: bundle) }

    /// Nib `YourRollCell`.
    var yourRollCell: RswiftResources.NibReference<UIKit.UIView> { .init(name: "YourRollCell", bundle: bundle) }

    func validate() throws {
      if UIKit.UIImage(named: "account_arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'account_arrow' is used in nib 'AccountLanguageCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "language_icon_black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'language_icon_black' is used in nib 'AccountLanguageCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "analysis_date_plane", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'analysis_date_plane' is used in nib 'AnalysisDateCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "cloudBlue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'cloudBlue' is used in nib 'AnalysisDateCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "hideTag", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'hideTag' is used in nib 'AnalysisInsightCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "cloud", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'cloud' is used in nib 'AnalysisLayerCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "analysis_date", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'analysis_date' is used in nib 'AnalysisTabItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "valleyBrand", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'valleyBrand' is used in nib 'AppCalendarCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "left_arrow_24pt", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'left_arrow_24pt' is used in nib 'AppCalendarWithArrows', but couldn't be loaded.") }
      if UIKit.UIImage(named: "right_arrow_24pt", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'right_arrow_24pt' is used in nib 'AppCalendarWithArrows', but couldn't be loaded.") }
      if UIKit.UIColor(named: "gray4", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'gray4' is used in nib 'AppCalendarWithArrows', but couldn't be loaded.") }
      if UIKit.UIImage(named: "blue-v", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'blue-v' is used in nib 'AppCheckBox', but couldn't be loaded.") }
      if UIKit.UIImage(named: "imageError", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imageError' is used in nib 'AppGalleryImageCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "search-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'search-icon' is used in nib 'AppGalleryImageCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Gray9", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Gray9' is used in nib 'AppGalleryImageCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "blacK", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blacK' is used in nib 'AppGalleryImageCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "imagePlaceholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imagePlaceholder' is used in nib 'AppTagView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "walkthroughPage0", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'walkthroughPage0' is used in nib 'AppWalkthroughCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "backArrowWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'backArrowWhite' is used in nib 'ContainerHeader', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dropDown", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dropDown' is used in nib 'ContainerHeader', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "magnifyingglass") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'magnifyingglass' is used in nib 'ContainerHeader', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "readFilter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'readFilter' is used in nib 'ContainerHeader', but couldn't be loaded.") }
      if UIKit.UIImage(named: "settingsIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'settingsIcon' is used in nib 'ContainerHeader', but couldn't be loaded.") }
      if UIKit.UIColor(named: "white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'white' is used in nib 'ContainerHeader', but couldn't be loaded.") }
      if UIKit.UIImage(named: "tabFieldsSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tabFieldsSelected' is used in nib 'CustomTabBar', but couldn't be loaded.") }
      if UIKit.UIImage(named: "tabFieldsUnselected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tabFieldsUnselected' is used in nib 'CustomTabBar', but couldn't be loaded.") }
      if UIKit.UIImage(named: "tabInsightsSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tabInsightsSelected' is used in nib 'CustomTabBar', but couldn't be loaded.") }
      if UIKit.UIImage(named: "tabInsightsUnselected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tabInsightsUnselected' is used in nib 'CustomTabBar', but couldn't be loaded.") }
      if UIKit.UIColor(named: "screenBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'screenBg' is used in nib 'EnhanceLocationCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'white' is used in nib 'EnhanceLocationCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "location_Info", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'location_Info' is used in nib 'EnhanceSectionHeaderView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "enhance_severity_arrow_up", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'enhance_severity_arrow_up' is used in nib 'EnhanceSeverityInnerTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "imagePlaceholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imagePlaceholder' is used in nib 'EnhanceTagImageViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "nightBadge", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'nightBadge' is used in nib 'EnhanceTagImageViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "triangle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'triangle' is used in nib 'EnterPhoneView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ArrowUp", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ArrowUp' is used in nib 'FieldCategoryCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "irrigationHighlightIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'irrigationHighlightIcon' is used in nib 'FieldCategoryCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "right_black_arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'right_black_arrow' is used in nib 'FieldCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "Gray7", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Gray7' is used in nib 'FieldCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "gray7", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'gray7' is used in nib 'FieldCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grey3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grey3' is used in nib 'FieldCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "readSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'readSelected' is used in nib 'FieldCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "screenBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'screenBg' is used in nib 'FieldCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'white' is used in nib 'FieldCategoryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grey3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grey3' is used in nib 'FieldCellShimmerView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "fieldHeaderPlaceholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fieldHeaderPlaceholder' is used in nib 'FieldCellView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "imageUnavailable", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imageUnavailable' is used in nib 'FieldCellView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "readSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'readSelected' is used in nib 'FieldCellView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "cloud", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'cloud' is used in nib 'FieldImageView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "help", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'help' is used in nib 'FieldImageView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "north", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'north' is used in nib 'FieldImageView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "showTag", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'showTag' is used in nib 'FieldImageView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gree_arrow_right", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gree_arrow_right' is used in nib 'FieldImageryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grey3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grey3' is used in nib 'FieldImageryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "screenBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'screenBg' is used in nib 'FieldImageryCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grey3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grey3' is used in nib 'FieldIrrigationCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "screenBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'screenBg' is used in nib 'FieldIrrigationCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "right_black_arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'right_black_arrow' is used in nib 'FieldIrrigationItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grey3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grey3' is used in nib 'FieldIrrigationItemCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "readSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'readSelected' is used in nib 'FieldIrrigationItemCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "headerSearchIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'headerSearchIcon' is used in nib 'FieldsSeachBar', but couldn't be loaded.") }
      if UIKit.UIImage(named: "searchCloseIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'searchCloseIcon' is used in nib 'FieldsSeachBar', but couldn't be loaded.") }
      if UIKit.UIImage(named: "CaretDown", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'CaretDown' is used in nib 'FieldsSectionHeader', but couldn't be loaded.") }
      if UIKit.UIImage(named: "SlidersHorizontal", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'SlidersHorizontal' is used in nib 'FieldsSectionHeader', but couldn't be loaded.") }
      if UIKit.UIColor(named: "darkMint", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'darkMint' is used in nib 'FieldsSectionHeader', but couldn't be loaded.") }
      if UIKit.UIColor(named: "screenBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'screenBg' is used in nib 'FieldsSectionHeader', but couldn't be loaded.") }
      if UIKit.UIColor(named: "valleyBrand", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'valleyBrand' is used in nib 'FieldsSectionHeader', but couldn't be loaded.") }
      if UIKit.UIImage(named: "RadioButtonOn", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'RadioButtonOn' is used in nib 'FieldsSortingCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "guideChangeDatesIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'guideChangeDatesIcon' is used in nib 'GuideCustomView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "guideCloseIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'guideCloseIcon' is used in nib 'GuideCustomView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "guidePinchIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'guidePinchIcon' is used in nib 'GuideCustomView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "guideTapImageIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'guideTapImageIcon' is used in nib 'GuideCustomView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "account_arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'account_arrow' is used in nib 'HelpCenterCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "help", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'help' is used in nib 'HelpCenterCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "irrigationHighlightIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'irrigationHighlightIcon' is used in nib 'HighlightBanner', but couldn't be loaded.") }
      if UIKit.UIImage(named: "highlight_empty_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'highlight_empty_icon' is used in nib 'HighlightEmptyCardView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "screenBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'screenBg' is used in nib 'HighlightPagerTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "irrigationHighlightIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'irrigationHighlightIcon' is used in nib 'HighlightSectionHeader', but couldn't be loaded.") }
      if UIKit.UIColor(named: "screenBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'screenBg' is used in nib 'HighlightSectionHeader', but couldn't be loaded.") }
      if UIKit.UIImage(named: "right_arrow_17pt", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'right_arrow_17pt' is used in nib 'ImageryPopupCellView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "imagery_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imagery_icon' is used in nib 'ImageryViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "triangle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'triangle' is used in nib 'ImpersonationView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "missing_image_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'missing_image_icon' is used in nib 'IssueCard', but couldn't be loaded.") }
      if UIKit.UIImage(named: "imagePlaceholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imagePlaceholder' is used in nib 'IssueTagImageViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "johnDeere", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'johnDeere' is used in nib 'JohnDeereCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "logout", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'logout' is used in nib 'LogoutCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "nightBadge", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'nightBadge' is used in nib 'NightBadge', but couldn't be loaded.") }
      if UIKit.UIImage(named: "notification", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'notification' is used in nib 'NotificationCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "RadioButtonOn", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'RadioButtonOn' is used in nib 'PickerPopupCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "emergence_stand_count_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'emergence_stand_count_icon' is used in nib 'RangeLocationOverviewStandCountTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Beta", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Beta' is used in nib 'RequestReportCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "highlightBtn", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'highlightBtn' is used in nib 'RequestReportCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "lightningBlue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'lightningBlue' is used in nib 'RequestReportCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "grey3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grey3' is used in nib 'RequestReportCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "screenBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'screenBg' is used in nib 'RequestReportCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'white' is used in nib 'RequestReportCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "iconValleyInsightsX", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconValleyInsightsX' is used in nib 'SingleIssue', but couldn't be loaded.") }
      if UIKit.UIImage(named: "missing_image_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'missing_image_icon' is used in nib 'SingleIssueCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "search-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'search-icon' is used in nib 'SingleIssueCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "missing_image_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'missing_image_icon' is used in nib 'SingleIssueIndexedCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "search-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'search-icon' is used in nib 'SingleIssueIndexedCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "missing_image_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'missing_image_icon' is used in nib 'SingleIssueIndexedNamedCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "search-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'search-icon' is used in nib 'SingleIssueIndexedNamedCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'white' is used in nib 'SingleLocationOverviewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "imagePlaceholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imagePlaceholder' is used in nib 'TagImageViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "account_arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'account_arrow' is used in nib 'YourAccountCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "info_blue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'info_blue' is used in nib 'YourAccountCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "team", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'team' is used in nib 'YourAccountCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "account_arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'account_arrow' is used in nib 'YourRollCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "role-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'role-icon' is used in nib 'YourRollCell', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 50 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `AnalysisInsightCell`.
    let analysisInsightCell: RswiftResources.ReuseIdentifier<AnalysisInsightCell> = .init(identifier: "AnalysisInsightCell")

    /// Reuse identifier `AppCalendarCell`.
    let appCalendarCell: RswiftResources.ReuseIdentifier<AppCalendarCell> = .init(identifier: "AppCalendarCell")

    /// Reuse identifier `AppGalleryImageCell`.
    let appGalleryImageCell: RswiftResources.ReuseIdentifier<AppGalleryImageCell> = .init(identifier: "AppGalleryImageCell")

    /// Reuse identifier `AppWalkthroughCell`.
    let appWalkthroughCell: RswiftResources.ReuseIdentifier<AppWalkthroughCell> = .init(identifier: "AppWalkthroughCell")

    /// Reuse identifier `EmptyLocationOverviewCell`.
    let emptyLocationOverviewCell: RswiftResources.ReuseIdentifier<EmptyLocationOverviewCell> = .init(identifier: "EmptyLocationOverviewCell")

    /// Reuse identifier `EnhanceDescriptionTableCell`.
    let enhanceDescriptionTableCell: RswiftResources.ReuseIdentifier<EnhanceDescriptionTableCell> = .init(identifier: "EnhanceDescriptionTableCell")

    /// Reuse identifier `EnhanceImagesTableCell`.
    let enhanceImagesTableCell: RswiftResources.ReuseIdentifier<EnhanceImagesTableCell> = .init(identifier: "EnhanceImagesTableCell")

    /// Reuse identifier `EnhanceLocationCell`.
    let enhanceLocationCell: RswiftResources.ReuseIdentifier<EnhanceLocationCell> = .init(identifier: "EnhanceLocationCell")

    /// Reuse identifier `EnhanceSeverityInnerTableCell`.
    let enhanceSeverityInnerTableCell: RswiftResources.ReuseIdentifier<EnhanceSeverityInnerTableCell> = .init(identifier: "EnhanceSeverityInnerTableCell")

    /// Reuse identifier `EnhanceSeverityTableCell`.
    let enhanceSeverityTableCell: RswiftResources.ReuseIdentifier<EnhanceSeverityTableCell> = .init(identifier: "EnhanceSeverityTableCell")

    /// Reuse identifier `EnhanceTagImageViewCell`.
    let enhanceTagImageViewCell: RswiftResources.ReuseIdentifier<EnhanceTagImageViewCell> = .init(identifier: "EnhanceTagImageViewCell")

    /// Reuse identifier `FarmSelectCell`.
    let farmSelectCell: RswiftResources.ReuseIdentifier<FarmSelectCell> = .init(identifier: "FarmSelectCell")

    /// Reuse identifier `FieldCategoryCell`.
    let fieldCategoryCell: RswiftResources.ReuseIdentifier<FieldCategoryCell> = .init(identifier: "FieldCategoryCell")

    /// Reuse identifier `FieldCellShimmerView`.
    let fieldCellShimmerView: RswiftResources.ReuseIdentifier<FieldCellShimmerView> = .init(identifier: "FieldCellShimmerView")

    /// Reuse identifier `FieldCellView`.
    let fieldCellView: RswiftResources.ReuseIdentifier<FieldCellView> = .init(identifier: "FieldCellView")

    /// Reuse identifier `FieldImageryCell`.
    let fieldImageryCell: RswiftResources.ReuseIdentifier<FieldImageryCell> = .init(identifier: "FieldImageryCell")

    /// Reuse identifier `FieldIrrigationCell`.
    let fieldIrrigationCell: RswiftResources.ReuseIdentifier<FieldIrrigationCell> = .init(identifier: "FieldIrrigationCell")

    /// Reuse identifier `FieldIrrigationItemCell`.
    let fieldIrrigationItemCell: RswiftResources.ReuseIdentifier<FieldIrrigationItemCell> = .init(identifier: "FieldIrrigationItemCell")

    /// Reuse identifier `FieldsSectionHeader`.
    let fieldsSectionHeader: RswiftResources.ReuseIdentifier<FieldsSectionHeader> = .init(identifier: "FieldsSectionHeader")

    /// Reuse identifier `FieldsSortingCell`.
    let fieldsSortingCell: RswiftResources.ReuseIdentifier<FieldsSortingCell> = .init(identifier: "FieldsSortingCell")

    /// Reuse identifier `HighlightCardView`.
    let highlightCardView: RswiftResources.ReuseIdentifier<HighlightCardView> = .init(identifier: "HighlightCardView")

    /// Reuse identifier `HighlightEmptyCardView`.
    let highlightEmptyCardView: RswiftResources.ReuseIdentifier<HighlightEmptyCardView> = .init(identifier: "HighlightEmptyCardView")

    /// Reuse identifier `HighlightPagerTableCell`.
    let highlightPagerTableCell: RswiftResources.ReuseIdentifier<HighlightPagerTableCell> = .init(identifier: "HighlightPagerTableCell")

    /// Reuse identifier `HighlightSectionHeader`.
    let highlightSectionHeader: RswiftResources.ReuseIdentifier<HighlightSectionHeader> = .init(identifier: "HighlightSectionHeader")

    /// Reuse identifier `HighlightsTableCell`.
    let highlightsTableCell: RswiftResources.ReuseIdentifier<HighlightsTableCell> = .init(identifier: "HighlightsTableCell")

    /// Reuse identifier `ImageryPopupCellView`.
    let imageryPopupCellView: RswiftResources.ReuseIdentifier<ImageryPopupCellView> = .init(identifier: "ImageryPopupCellView")

    /// Reuse identifier `ImageryViewCell`.
    let imageryViewCell: RswiftResources.ReuseIdentifier<ImageryViewCell> = .init(identifier: "ImageryViewCell")

    /// Reuse identifier `InsightViewCell`.
    let insightViewCell: RswiftResources.ReuseIdentifier<InsightViewCell> = .init(identifier: "InsightViewCell")

    /// Reuse identifier `IssueCard`.
    let issueCard: RswiftResources.ReuseIdentifier<IssueCard> = .init(identifier: "IssueCard")

    /// Reuse identifier `IssueLocationOverviewCell`.
    let issueLocationOverviewCell: RswiftResources.ReuseIdentifier<IssueLocationOverviewCell> = .init(identifier: "IssueLocationOverviewCell")

    /// Reuse identifier `IssueOverviewTableCell`.
    let issueOverviewTableCell: RswiftResources.ReuseIdentifier<IssueOverviewTableCell> = .init(identifier: "IssueOverviewTableCell")

    /// Reuse identifier `IssueTagImageViewCell`.
    let issueTagImageViewCell: RswiftResources.ReuseIdentifier<IssueTagImageViewCell> = .init(identifier: "IssueTagImageViewCell")

    /// Reuse identifier `LanguageCell`.
    let languageCell: RswiftResources.ReuseIdentifier<LanguageCell> = .init(identifier: "LanguageCell")

    /// Reuse identifier `LayerGuideCell`.
    let layerGuideCell: RswiftResources.ReuseIdentifier<LayerGuideCell> = .init(identifier: "LayerGuideCell")

    /// Reuse identifier `LocationInsightPage`.
    let locationInsightPage: RswiftResources.ReuseIdentifier<LocationInsightPage> = .init(identifier: "LocationInsightPage")

    /// Reuse identifier `OverviewCell`.
    let overviewCell: RswiftResources.ReuseIdentifier<OverviewCell> = .init(identifier: "OverviewCell")

    /// Reuse identifier `OverviewInfoTableViewCell`.
    let overviewInfoTableViewCell: RswiftResources.ReuseIdentifier<OverviewInfoTableViewCell> = .init(identifier: "OverviewInfoTableViewCell")

    /// Reuse identifier `PickerPopupCell`.
    let pickerPopupCell: RswiftResources.ReuseIdentifier<PickerPopupCell> = .init(identifier: "PickerPopupCell")

    /// Reuse identifier `rangeLocationOverviewStandCountTableCell`.
    let rangeLocationOverviewStandCountTableCell: RswiftResources.ReuseIdentifier<RangeLocationOverviewStandCountTableCell> = .init(identifier: "rangeLocationOverviewStandCountTableCell")

    /// Reuse identifier `RangedLocationOverviewCell`.
    let rangedLocationOverviewCell: RswiftResources.ReuseIdentifier<RangedLocationOverviewCell> = .init(identifier: "RangedLocationOverviewCell")

    /// Reuse identifier `RangedLocationOverviewTableCell`.
    let rangedLocationOverviewTableCell: RswiftResources.ReuseIdentifier<RangedLocationOverviewTableCell> = .init(identifier: "RangedLocationOverviewTableCell")

    /// Reuse identifier `RequestReportCell`.
    let requestReportCell: RswiftResources.ReuseIdentifier<RequestReportCell> = .init(identifier: "RequestReportCell")

    /// Reuse identifier `RoleCell`.
    let roleCell: RswiftResources.ReuseIdentifier<RoleCell> = .init(identifier: "RoleCell")

    /// Reuse identifier `SingleIssueCell`.
    let singleIssueCell: RswiftResources.ReuseIdentifier<SingleIssueCell> = .init(identifier: "SingleIssueCell")

    /// Reuse identifier `SingleIssueIndexedCell`.
    let singleIssueIndexedCell: RswiftResources.ReuseIdentifier<SingleIssueIndexedCell> = .init(identifier: "SingleIssueIndexedCell")

    /// Reuse identifier `SingleIssueIndexedNamedCell`.
    let singleIssueIndexedNamedCell: RswiftResources.ReuseIdentifier<SingleIssueIndexedNamedCell> = .init(identifier: "SingleIssueIndexedNamedCell")

    /// Reuse identifier `SingleLocationDateCell`.
    let singleLocationDateCell: RswiftResources.ReuseIdentifier<SingleLocationDateCell> = .init(identifier: "SingleLocationDateCell")

    /// Reuse identifier `SingleLocationImageCell`.
    let singleLocationImageCell: RswiftResources.ReuseIdentifier<SingleLocationImageCell> = .init(identifier: "SingleLocationImageCell")

    /// Reuse identifier `SingleLocationOverviewCell`.
    let singleLocationOverviewCell: RswiftResources.ReuseIdentifier<SingleLocationOverviewCell> = .init(identifier: "SingleLocationOverviewCell")

    /// Reuse identifier `TagImageViewCell`.
    let tagImageViewCell: RswiftResources.ReuseIdentifier<TagImageViewCell> = .init(identifier: "TagImageViewCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 39 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var accountViewController: accountViewController { .init(bundle: bundle) }
    var analysisHolderViewController: analysisHolderViewController { .init(bundle: bundle) }
    var analysisInsightsViewController: analysisInsightsViewController { .init(bundle: bundle) }
    var analysisViewController: analysisViewController { .init(bundle: bundle) }
    var appWalkthroughViewController: appWalkthroughViewController { .init(bundle: bundle) }
    var basicPopupViewController: basicPopupViewController { .init(bundle: bundle) }
    var comparePopUpViewController: comparePopUpViewController { .init(bundle: bundle) }
    var containerViewController: containerViewController { .init(bundle: bundle) }
    var contractViewController: contractViewController { .init(bundle: bundle) }
    var datesFilterViewController: datesFilterViewController { .init(bundle: bundle) }
    var errorViewController: errorViewController { .init(bundle: bundle) }
    var farmSelectionViewController: farmSelectionViewController { .init(bundle: bundle) }
    var feedbackViewController: feedbackViewController { .init(bundle: bundle) }
    var fieldViewController: fieldViewController { .init(bundle: bundle) }
    var fieldsListViewController: fieldsListViewController { .init(bundle: bundle) }
    var fieldsSortingPickerPopupViewController: fieldsSortingPickerPopupViewController { .init(bundle: bundle) }
    var highlightsViewController: highlightsViewController { .init(bundle: bundle) }
    var imageryPopupViewController: imageryPopupViewController { .init(bundle: bundle) }
    var inboxListViewController: inboxListViewController { .init(bundle: bundle) }
    var insightDrawerViewController: insightDrawerViewController { .init(bundle: bundle) }
    var insightViewController: insightViewController { .init(bundle: bundle) }
    var languagePickerPopupViewController: languagePickerPopupViewController { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var layerGuideViewController: layerGuideViewController { .init(bundle: bundle) }
    var layersFilterViewController: layersFilterViewController { .init(bundle: bundle) }
    var locationInsightViewController: locationInsightViewController { .init(bundle: bundle) }
    var locationInsightsPagerViewController: locationInsightsPagerViewController { .init(bundle: bundle) }
    var loginViewController: loginViewController { .init(bundle: bundle) }
    var phonePrefixPickerViewController: phonePrefixPickerViewController { .init(bundle: bundle) }
    var pickerPopupViewController: pickerPopupViewController { .init(bundle: bundle) }
    var roleSelectionViewController: roleSelectionViewController { .init(bundle: bundle) }
    var signContractViewController: signContractViewController { .init(bundle: bundle) }
    var splashViewController: splashViewController { .init(bundle: bundle) }
    var subscribePopupViewController: subscribePopupViewController { .init(bundle: bundle) }
    var tagsImagesViewController: tagsImagesViewController { .init(bundle: bundle) }
    var updatePopUpViewController: updatePopUpViewController { .init(bundle: bundle) }
    var virtualScoutingViewController: virtualScoutingViewController { .init(bundle: bundle) }
    var walkThrughPopUpViewController: walkThrughPopUpViewController { .init(bundle: bundle) }
    var welcomeViewController: welcomeViewController { .init(bundle: bundle) }

    func accountViewController(bundle: Foundation.Bundle) -> accountViewController {
      .init(bundle: bundle)
    }
    func analysisHolderViewController(bundle: Foundation.Bundle) -> analysisHolderViewController {
      .init(bundle: bundle)
    }
    func analysisInsightsViewController(bundle: Foundation.Bundle) -> analysisInsightsViewController {
      .init(bundle: bundle)
    }
    func analysisViewController(bundle: Foundation.Bundle) -> analysisViewController {
      .init(bundle: bundle)
    }
    func appWalkthroughViewController(bundle: Foundation.Bundle) -> appWalkthroughViewController {
      .init(bundle: bundle)
    }
    func basicPopupViewController(bundle: Foundation.Bundle) -> basicPopupViewController {
      .init(bundle: bundle)
    }
    func comparePopUpViewController(bundle: Foundation.Bundle) -> comparePopUpViewController {
      .init(bundle: bundle)
    }
    func containerViewController(bundle: Foundation.Bundle) -> containerViewController {
      .init(bundle: bundle)
    }
    func contractViewController(bundle: Foundation.Bundle) -> contractViewController {
      .init(bundle: bundle)
    }
    func datesFilterViewController(bundle: Foundation.Bundle) -> datesFilterViewController {
      .init(bundle: bundle)
    }
    func errorViewController(bundle: Foundation.Bundle) -> errorViewController {
      .init(bundle: bundle)
    }
    func farmSelectionViewController(bundle: Foundation.Bundle) -> farmSelectionViewController {
      .init(bundle: bundle)
    }
    func feedbackViewController(bundle: Foundation.Bundle) -> feedbackViewController {
      .init(bundle: bundle)
    }
    func fieldViewController(bundle: Foundation.Bundle) -> fieldViewController {
      .init(bundle: bundle)
    }
    func fieldsListViewController(bundle: Foundation.Bundle) -> fieldsListViewController {
      .init(bundle: bundle)
    }
    func fieldsSortingPickerPopupViewController(bundle: Foundation.Bundle) -> fieldsSortingPickerPopupViewController {
      .init(bundle: bundle)
    }
    func highlightsViewController(bundle: Foundation.Bundle) -> highlightsViewController {
      .init(bundle: bundle)
    }
    func imageryPopupViewController(bundle: Foundation.Bundle) -> imageryPopupViewController {
      .init(bundle: bundle)
    }
    func inboxListViewController(bundle: Foundation.Bundle) -> inboxListViewController {
      .init(bundle: bundle)
    }
    func insightDrawerViewController(bundle: Foundation.Bundle) -> insightDrawerViewController {
      .init(bundle: bundle)
    }
    func insightViewController(bundle: Foundation.Bundle) -> insightViewController {
      .init(bundle: bundle)
    }
    func languagePickerPopupViewController(bundle: Foundation.Bundle) -> languagePickerPopupViewController {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func layerGuideViewController(bundle: Foundation.Bundle) -> layerGuideViewController {
      .init(bundle: bundle)
    }
    func layersFilterViewController(bundle: Foundation.Bundle) -> layersFilterViewController {
      .init(bundle: bundle)
    }
    func locationInsightViewController(bundle: Foundation.Bundle) -> locationInsightViewController {
      .init(bundle: bundle)
    }
    func locationInsightsPagerViewController(bundle: Foundation.Bundle) -> locationInsightsPagerViewController {
      .init(bundle: bundle)
    }
    func loginViewController(bundle: Foundation.Bundle) -> loginViewController {
      .init(bundle: bundle)
    }
    func phonePrefixPickerViewController(bundle: Foundation.Bundle) -> phonePrefixPickerViewController {
      .init(bundle: bundle)
    }
    func pickerPopupViewController(bundle: Foundation.Bundle) -> pickerPopupViewController {
      .init(bundle: bundle)
    }
    func roleSelectionViewController(bundle: Foundation.Bundle) -> roleSelectionViewController {
      .init(bundle: bundle)
    }
    func signContractViewController(bundle: Foundation.Bundle) -> signContractViewController {
      .init(bundle: bundle)
    }
    func splashViewController(bundle: Foundation.Bundle) -> splashViewController {
      .init(bundle: bundle)
    }
    func subscribePopupViewController(bundle: Foundation.Bundle) -> subscribePopupViewController {
      .init(bundle: bundle)
    }
    func tagsImagesViewController(bundle: Foundation.Bundle) -> tagsImagesViewController {
      .init(bundle: bundle)
    }
    func updatePopUpViewController(bundle: Foundation.Bundle) -> updatePopUpViewController {
      .init(bundle: bundle)
    }
    func virtualScoutingViewController(bundle: Foundation.Bundle) -> virtualScoutingViewController {
      .init(bundle: bundle)
    }
    func walkThrughPopUpViewController(bundle: Foundation.Bundle) -> walkThrughPopUpViewController {
      .init(bundle: bundle)
    }
    func welcomeViewController(bundle: Foundation.Bundle) -> welcomeViewController {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.accountViewController.validate()
      try self.analysisHolderViewController.validate()
      try self.analysisInsightsViewController.validate()
      try self.analysisViewController.validate()
      try self.appWalkthroughViewController.validate()
      try self.basicPopupViewController.validate()
      try self.comparePopUpViewController.validate()
      try self.containerViewController.validate()
      try self.contractViewController.validate()
      try self.datesFilterViewController.validate()
      try self.errorViewController.validate()
      try self.farmSelectionViewController.validate()
      try self.feedbackViewController.validate()
      try self.fieldViewController.validate()
      try self.fieldsListViewController.validate()
      try self.fieldsSortingPickerPopupViewController.validate()
      try self.highlightsViewController.validate()
      try self.imageryPopupViewController.validate()
      try self.inboxListViewController.validate()
      try self.insightDrawerViewController.validate()
      try self.insightViewController.validate()
      try self.languagePickerPopupViewController.validate()
      try self.launchScreen.validate()
      try self.layerGuideViewController.validate()
      try self.layersFilterViewController.validate()
      try self.locationInsightViewController.validate()
      try self.locationInsightsPagerViewController.validate()
      try self.loginViewController.validate()
      try self.phonePrefixPickerViewController.validate()
      try self.pickerPopupViewController.validate()
      try self.roleSelectionViewController.validate()
      try self.signContractViewController.validate()
      try self.splashViewController.validate()
      try self.subscribePopupViewController.validate()
      try self.tagsImagesViewController.validate()
      try self.updatePopUpViewController.validate()
      try self.virtualScoutingViewController.validate()
      try self.walkThrughPopUpViewController.validate()
      try self.welcomeViewController.validate()
    }


    /// Storyboard `AccountViewController`.
    struct accountViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "AccountViewController"

      var accountViewController: RswiftResources.StoryboardViewControllerIdentifier<AccountViewController> { .init(identifier: "AccountViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "backArrowWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'backArrowWhite' is used in storyboard 'AccountViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "screenBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'screenBg' is used in storyboard 'AccountViewController', but couldn't be loaded.") }
        if accountViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'accountViewController' could not be loaded from storyboard 'AccountViewController' as 'AccountViewController'.") }
      }
    }

    /// Storyboard `AnalysisHolderViewController`.
    struct analysisHolderViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "AnalysisHolderViewController"

      var analysisHolderViewController: RswiftResources.StoryboardViewControllerIdentifier<AnalysisHolderViewController> { .init(identifier: "AnalysisHolderViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "compare_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'compare_icon' is used in storyboard 'AnalysisHolderViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconValleyInsightsX", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconValleyInsightsX' is used in storyboard 'AnalysisHolderViewController', but couldn't be loaded.") }
        if analysisHolderViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'analysisHolderViewController' could not be loaded from storyboard 'AnalysisHolderViewController' as 'AnalysisHolderViewController'.") }
      }
    }

    /// Storyboard `AnalysisInsightsViewController`.
    struct analysisInsightsViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "AnalysisInsightsViewController"

      var analysisInsightsViewController: RswiftResources.StoryboardViewControllerIdentifier<AnalysisInsightsViewController> { .init(identifier: "AnalysisInsightsViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if analysisInsightsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'analysisInsightsViewController' could not be loaded from storyboard 'AnalysisInsightsViewController' as 'AnalysisInsightsViewController'.") }
      }
    }

    /// Storyboard `AnalysisViewController`.
    struct analysisViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "AnalysisViewController"

      var analysisViewController: RswiftResources.StoryboardViewControllerIdentifier<AnalysisViewController> { .init(identifier: "AnalysisViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if analysisViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'analysisViewController' could not be loaded from storyboard 'AnalysisViewController' as 'AnalysisViewController'.") }
      }
    }

    /// Storyboard `AppWalkthroughViewController`.
    struct appWalkthroughViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "AppWalkthroughViewController"

      var appWalkthroughViewController: RswiftResources.StoryboardViewControllerIdentifier<AppWalkthroughViewController> { .init(identifier: "AppWalkthroughViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if appWalkthroughViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'appWalkthroughViewController' could not be loaded from storyboard 'AppWalkthroughViewController' as 'AppWalkthroughViewController'.") }
      }
    }

    /// Storyboard `BasicPopupViewController`.
    struct basicPopupViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "BasicPopupViewController"

      var basicPopupViewController: RswiftResources.StoryboardViewControllerIdentifier<BasicPopupViewController> { .init(identifier: "BasicPopupViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if basicPopupViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'basicPopupViewController' could not be loaded from storyboard 'BasicPopupViewController' as 'BasicPopupViewController'.") }
      }
    }

    /// Storyboard `ComparePopUpViewController`.
    struct comparePopUpViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "ComparePopUpViewController"

      var comparePopUpViewController: RswiftResources.StoryboardViewControllerIdentifier<ComparePopUpViewController> { .init(identifier: "ComparePopUpViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if comparePopUpViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'comparePopUpViewController' could not be loaded from storyboard 'ComparePopUpViewController' as 'ComparePopUpViewController'.") }
      }
    }

    /// Storyboard `ContainerViewController`.
    struct containerViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "ContainerViewController"

      var containerViewController: RswiftResources.StoryboardViewControllerIdentifier<ContainerViewController> { .init(identifier: "ContainerViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "exclamationmark.circle") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'exclamationmark.circle' is used in storyboard 'ContainerViewController', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "app-color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'app-color' is used in storyboard 'ContainerViewController', but couldn't be loaded.") }
        if containerViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'containerViewController' could not be loaded from storyboard 'ContainerViewController' as 'ContainerViewController'.") }
      }
    }

    /// Storyboard `ContractViewController`.
    struct contractViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "ContractViewController"

      var contractViewController: RswiftResources.StoryboardViewControllerIdentifier<ContractViewController> { .init(identifier: "ContractViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "iconValleyInsightsX", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconValleyInsightsX' is used in storyboard 'ContractViewController', but couldn't be loaded.") }
        if contractViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'contractViewController' could not be loaded from storyboard 'ContractViewController' as 'ContractViewController'.") }
      }
    }

    /// Storyboard `DatesFilterViewController`.
    struct datesFilterViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "DatesFilterViewController"

      var datesFilterViewController: RswiftResources.StoryboardViewControllerIdentifier<DatesFilterViewController> { .init(identifier: "DatesFilterViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "left_arrow_24pt", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'left_arrow_24pt' is used in storyboard 'DatesFilterViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right_arrow_24pt", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'right_arrow_24pt' is used in storyboard 'DatesFilterViewController', but couldn't be loaded.") }
        if datesFilterViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'datesFilterViewController' could not be loaded from storyboard 'DatesFilterViewController' as 'DatesFilterViewController'.") }
      }
    }

    /// Storyboard `ErrorViewController`.
    struct errorViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "ErrorViewController"

      var errorViewController: RswiftResources.StoryboardViewControllerIdentifier<ErrorViewController> { .init(identifier: "ErrorViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "inboxErrorState", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'inboxErrorState' is used in storyboard 'ErrorViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "prosperaLogo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'prosperaLogo' is used in storyboard 'ErrorViewController', but couldn't be loaded.") }
        if errorViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'errorViewController' could not be loaded from storyboard 'ErrorViewController' as 'ErrorViewController'.") }
      }
    }

    /// Storyboard `FarmSelectionViewController`.
    struct farmSelectionViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "FarmSelectionViewController"

      var farmSelectionViewController: RswiftResources.StoryboardViewControllerIdentifier<FarmSelectionViewController> { .init(identifier: "FarmSelectionViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if farmSelectionViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'farmSelectionViewController' could not be loaded from storyboard 'FarmSelectionViewController' as 'FarmSelectionViewController'.") }
      }
    }

    /// Storyboard `FeedbackViewController`.
    struct feedbackViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "FeedbackViewController"

      var feedbackViewController: RswiftResources.StoryboardViewControllerIdentifier<FeedbackViewController> { .init(identifier: "FeedbackViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if feedbackViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'feedbackViewController' could not be loaded from storyboard 'FeedbackViewController' as 'FeedbackViewController'.") }
      }
    }

    /// Storyboard `FieldViewController`.
    struct fieldViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "FieldViewController"

      var fieldViewController: RswiftResources.StoryboardViewControllerIdentifier<FieldViewController> { .init(identifier: "FieldViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "BackArrowBlack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'BackArrowBlack' is used in storyboard 'FieldViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NEW", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'NEW' is used in storyboard 'FieldViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "binoculars", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'binoculars' is used in storyboard 'FieldViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "drop_down_arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'drop_down_arrow' is used in storyboard 'FieldViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Gray1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Gray1' is used in storyboard 'FieldViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "darkMint", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'darkMint' is used in storyboard 'FieldViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "grey3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'grey3' is used in storyboard 'FieldViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "screenBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'screenBg' is used in storyboard 'FieldViewController', but couldn't be loaded.") }
        if fieldViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'fieldViewController' could not be loaded from storyboard 'FieldViewController' as 'FieldViewController'.") }
      }
    }

    /// Storyboard `FieldsListViewController`.
    struct fieldsListViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "FieldsListViewController"

      var fieldsListViewController: RswiftResources.StoryboardViewControllerIdentifier<FieldsListViewController> { .init(identifier: "FieldsListViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if fieldsListViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'fieldsListViewController' could not be loaded from storyboard 'FieldsListViewController' as 'FieldsListViewController'.") }
      }
    }

    /// Storyboard `FieldsSortingPickerPopupViewController`.
    struct fieldsSortingPickerPopupViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "FieldsSortingPickerPopupViewController"

      var fieldsSortingPickerPopupViewController: RswiftResources.StoryboardViewControllerIdentifier<FieldsSortingPickerPopupViewController> { .init(identifier: "FieldsSortingPickerPopupViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIColor(named: "white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'white' is used in storyboard 'FieldsSortingPickerPopupViewController', but couldn't be loaded.") }
        if fieldsSortingPickerPopupViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'fieldsSortingPickerPopupViewController' could not be loaded from storyboard 'FieldsSortingPickerPopupViewController' as 'FieldsSortingPickerPopupViewController'.") }
      }
    }

    /// Storyboard `HighlightsViewController`.
    struct highlightsViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "HighlightsViewController"

      var highlightsViewController: RswiftResources.StoryboardViewControllerIdentifier<HighlightsViewController> { .init(identifier: "HighlightsViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "backArrowWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'backArrowWhite' is used in storyboard 'HighlightsViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "screenBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'screenBg' is used in storyboard 'HighlightsViewController', but couldn't be loaded.") }
        if highlightsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'highlightsViewController' could not be loaded from storyboard 'HighlightsViewController' as 'HighlightsViewController'.") }
      }
    }

    /// Storyboard `ImageryPopupViewController`.
    struct imageryPopupViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "ImageryPopupViewController"

      var imageryPopupViewController: RswiftResources.StoryboardViewControllerIdentifier<ImageryPopupViewController> { .init(identifier: "ImageryPopupViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "iconValleyInsightsXWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconValleyInsightsXWhite' is used in storyboard 'ImageryPopupViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageryHeaderBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'imageryHeaderBg' is used in storyboard 'ImageryPopupViewController', but couldn't be loaded.") }
        if imageryPopupViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'imageryPopupViewController' could not be loaded from storyboard 'ImageryPopupViewController' as 'ImageryPopupViewController'.") }
      }
    }

    /// Storyboard `InboxListViewController`.
    struct inboxListViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "InboxListViewController"

      var inboxListViewController: RswiftResources.StoryboardViewControllerIdentifier<InboxListViewController> { .init(identifier: "InboxListViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "inboxEmptyUnread", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'inboxEmptyUnread' is used in storyboard 'InboxListViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "inboxErrorState", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'inboxErrorState' is used in storyboard 'InboxListViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "no-filter-image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'no-filter-image' is used in storyboard 'InboxListViewController', but couldn't be loaded.") }
        if inboxListViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'inboxListViewController' could not be loaded from storyboard 'InboxListViewController' as 'InboxListViewController'.") }
      }
    }

    /// Storyboard `InsightDrawerViewController`.
    struct insightDrawerViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "InsightDrawerViewController"

      var insightDrawerViewController: RswiftResources.StoryboardViewControllerIdentifier<InsightDrawerViewController> { .init(identifier: "InsightDrawerViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "365", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named '365' is used in storyboard 'InsightDrawerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "FeedbackStarSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'FeedbackStarSelected' is used in storyboard 'InsightDrawerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "FeedbackStarUnselected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'FeedbackStarUnselected' is used in storyboard 'InsightDrawerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "analyzeIconValley", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'analyzeIconValley' is used in storyboard 'InsightDrawerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "markAsUnread", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'markAsUnread' is used in storyboard 'InsightDrawerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'share' is used in storyboard 'InsightDrawerViewController', but couldn't be loaded.") }
        if insightDrawerViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'insightDrawerViewController' could not be loaded from storyboard 'InsightDrawerViewController' as 'InsightDrawerViewController'.") }
      }
    }

    /// Storyboard `InsightViewController`.
    struct insightViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "InsightViewController"

      var insightViewController: RswiftResources.StoryboardViewControllerIdentifier<InsightViewController> { .init(identifier: "InsightViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "BackArrowBlack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'BackArrowBlack' is used in storyboard 'InsightViewController', but couldn't be loaded.") }
        if insightViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'insightViewController' could not be loaded from storyboard 'InsightViewController' as 'InsightViewController'.") }
      }
    }

    /// Storyboard `LanguagePickerPopupViewController`.
    struct languagePickerPopupViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "LanguagePickerPopupViewController"

      var languagePickerPopupViewController: RswiftResources.StoryboardViewControllerIdentifier<LanguagePickerPopupViewController> { .init(identifier: "LanguagePickerPopupViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if languagePickerPopupViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'languagePickerPopupViewController' could not be loaded from storyboard 'LanguagePickerPopupViewController' as 'LanguagePickerPopupViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "valleyLogo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'valleyLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "valley_powered_by_prospera", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'valley_powered_by_prospera' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `LayerGuideViewController`.
    struct layerGuideViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "LayerGuideViewController"

      var layerGuideViewController: RswiftResources.StoryboardViewControllerIdentifier<LayerGuideViewController> { .init(identifier: "LayerGuideViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if layerGuideViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'layerGuideViewController' could not be loaded from storyboard 'LayerGuideViewController' as 'LayerGuideViewController'.") }
      }
    }

    /// Storyboard `LayersFilterViewController`.
    struct layersFilterViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "LayersFilterViewController"

      var layerFilterViewController: RswiftResources.StoryboardViewControllerIdentifier<LayerFilterViewController> { .init(identifier: "LayerFilterViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if layerFilterViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'layerFilterViewController' could not be loaded from storyboard 'LayersFilterViewController' as 'LayerFilterViewController'.") }
      }
    }

    /// Storyboard `LocationInsightViewController`.
    struct locationInsightViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "LocationInsightViewController"

      var locationInsightViewController: RswiftResources.StoryboardViewControllerIdentifier<LocationInsightViewController> { .init(identifier: "LocationInsightViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "north", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'north' is used in storyboard 'LocationInsightViewController', but couldn't be loaded.") }
        if locationInsightViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'locationInsightViewController' could not be loaded from storyboard 'LocationInsightViewController' as 'LocationInsightViewController'.") }
      }
    }

    /// Storyboard `LocationInsightsPagerViewController`.
    struct locationInsightsPagerViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "LocationInsightsPagerViewController"

      var locationInsightsPagerViewController: RswiftResources.StoryboardViewControllerIdentifier<LocationInsightsPagerViewController> { .init(identifier: "LocationInsightsPagerViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "left_arrow_24pt", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'left_arrow_24pt' is used in storyboard 'LocationInsightsPagerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right_arrow_24pt", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'right_arrow_24pt' is used in storyboard 'LocationInsightsPagerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shareGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'shareGreen' is used in storyboard 'LocationInsightsPagerViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wide_black_back_arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'wide_black_back_arrow' is used in storyboard 'LocationInsightsPagerViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Gray1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Gray1' is used in storyboard 'LocationInsightsPagerViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "blacK", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blacK' is used in storyboard 'LocationInsightsPagerViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "screenBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'screenBg' is used in storyboard 'LocationInsightsPagerViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "selectedBackGround", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'selectedBackGround' is used in storyboard 'LocationInsightsPagerViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'white' is used in storyboard 'LocationInsightsPagerViewController', but couldn't be loaded.") }
        if locationInsightsPagerViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'locationInsightsPagerViewController' could not be loaded from storyboard 'LocationInsightsPagerViewController' as 'LocationInsightsPagerViewController'.") }
      }
    }

    /// Storyboard `LoginViewController`.
    struct loginViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "LoginViewController"

      var loginViewController: RswiftResources.StoryboardViewControllerIdentifier<LoginViewController> { .init(identifier: "LoginViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "left_arrow_bold_24pt", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'left_arrow_bold_24pt' is used in storyboard 'LoginViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_bg_blur", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'login_bg_blur' is used in storyboard 'LoginViewController', but couldn't be loaded.") }
        if loginViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'LoginViewController' as 'LoginViewController'.") }
      }
    }

    /// Storyboard `PhonePrefixPickerViewController`.
    struct phonePrefixPickerViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "PhonePrefixPickerViewController"

      var phonePrefixPickerViewController: RswiftResources.StoryboardViewControllerIdentifier<PhonePrefixPickerViewController> { .init(identifier: "PhonePrefixPickerViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if phonePrefixPickerViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'phonePrefixPickerViewController' could not be loaded from storyboard 'PhonePrefixPickerViewController' as 'PhonePrefixPickerViewController'.") }
      }
    }

    /// Storyboard `PickerPopupViewController`.
    struct pickerPopupViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "PickerPopupViewController"

      var pickerPopupViewController: RswiftResources.StoryboardViewControllerIdentifier<PickerPopupViewController> { .init(identifier: "PickerPopupViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIColor(named: "white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'white' is used in storyboard 'PickerPopupViewController', but couldn't be loaded.") }
        if pickerPopupViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'pickerPopupViewController' could not be loaded from storyboard 'PickerPopupViewController' as 'PickerPopupViewController'.") }
      }
    }

    /// Storyboard `RoleSelectionViewController`.
    struct roleSelectionViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "RoleSelectionViewController"

      var roleSelectionViewController: RswiftResources.StoryboardViewControllerIdentifier<RoleSelectionViewController> { .init(identifier: "RoleSelectionViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "grey-x-icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'grey-x-icon' is used in storyboard 'RoleSelectionViewController', but couldn't be loaded.") }
        if roleSelectionViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'roleSelectionViewController' could not be loaded from storyboard 'RoleSelectionViewController' as 'RoleSelectionViewController'.") }
      }
    }

    /// Storyboard `SignContractViewController`.
    struct signContractViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "SignContractViewController"

      var signContractViewController: RswiftResources.StoryboardViewControllerIdentifier<SignContractViewController> { .init(identifier: "SignContractViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "terms_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'terms_image' is used in storyboard 'SignContractViewController', but couldn't be loaded.") }
        if signContractViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'signContractViewController' could not be loaded from storyboard 'SignContractViewController' as 'SignContractViewController'.") }
      }
    }

    /// Storyboard `SplashViewController`.
    struct splashViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "SplashViewController"

      var splashViewController: RswiftResources.StoryboardViewControllerIdentifier<SplashViewController> { .init(identifier: "SplashViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "valleyLogo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'valleyLogo' is used in storyboard 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "valley_powered_by_prospera", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'valley_powered_by_prospera' is used in storyboard 'SplashViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'white' is used in storyboard 'SplashViewController', but couldn't be loaded.") }
        if splashViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'splashViewController' could not be loaded from storyboard 'SplashViewController' as 'SplashViewController'.") }
      }
    }

    /// Storyboard `SubscribePopupViewController`.
    struct subscribePopupViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "SubscribePopupViewController"

      var subscribePopupViewController: RswiftResources.StoryboardViewControllerIdentifier<SubscribePopupViewController> { .init(identifier: "SubscribePopupViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if subscribePopupViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'subscribePopupViewController' could not be loaded from storyboard 'SubscribePopupViewController' as 'SubscribePopupViewController'.") }
      }
    }

    /// Storyboard `TagsImagesViewController`.
    struct tagsImagesViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "TagsImagesViewController"

      var tagsImagesViewController: RswiftResources.StoryboardViewControllerIdentifier<TagsImagesViewController> { .init(identifier: "TagsImagesViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "iconValleyInsightsXWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconValleyInsightsXWhite' is used in storyboard 'TagsImagesViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "leftWhiteArrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'leftWhiteArrow' is used in storyboard 'TagsImagesViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "navigateIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'navigateIcon' is used in storyboard 'TagsImagesViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "nightBadge", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'nightBadge' is used in storyboard 'TagsImagesViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rightWhiteArrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'rightWhiteArrow' is used in storyboard 'TagsImagesViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "gray4", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'gray4' is used in storyboard 'TagsImagesViewController', but couldn't be loaded.") }
        if tagsImagesViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'tagsImagesViewController' could not be loaded from storyboard 'TagsImagesViewController' as 'TagsImagesViewController'.") }
      }
    }

    /// Storyboard `UpdatePopUpViewController`.
    struct updatePopUpViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "UpdatePopUpViewController"

      var updatePopUpViewController: RswiftResources.StoryboardViewControllerIdentifier<UpdatePopUpViewController> { .init(identifier: "UpdatePopUpViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "forceUpdateImage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'forceUpdateImage' is used in storyboard 'UpdatePopUpViewController', but couldn't be loaded.") }
        if updatePopUpViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'updatePopUpViewController' could not be loaded from storyboard 'UpdatePopUpViewController' as 'UpdatePopUpViewController'.") }
      }
    }

    /// Storyboard `VirtualScoutingViewController`.
    struct virtualScoutingViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "VirtualScoutingViewController"

      var virtualScoutingViewController: RswiftResources.StoryboardViewControllerIdentifier<VirtualScoutingViewController> { .init(identifier: "VirtualScoutingViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "iconValleyInsightsX", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'iconValleyInsightsX' is used in storyboard 'VirtualScoutingViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "north", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'north' is used in storyboard 'VirtualScoutingViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wide_black_back_arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'wide_black_back_arrow' is used in storyboard 'VirtualScoutingViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "Gray1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'Gray1' is used in storyboard 'VirtualScoutingViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "blacK", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'blacK' is used in storyboard 'VirtualScoutingViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryGreen", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryGreen' is used in storyboard 'VirtualScoutingViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "screenBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'screenBg' is used in storyboard 'VirtualScoutingViewController', but couldn't be loaded.") }
        if UIKit.UIColor(named: "white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'white' is used in storyboard 'VirtualScoutingViewController', but couldn't be loaded.") }
        if virtualScoutingViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'virtualScoutingViewController' could not be loaded from storyboard 'VirtualScoutingViewController' as 'VirtualScoutingViewController'.") }
      }
    }

    /// Storyboard `WalkThrughPopUpViewController`.
    struct walkThrughPopUpViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "WalkThrughPopUpViewController"

      var walkThrughPopUpViewController: RswiftResources.StoryboardViewControllerIdentifier<WalkThrughPopUpViewController> { .init(identifier: "WalkThrughPopUpViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "walk-through-image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'walk-through-image' is used in storyboard 'WalkThrughPopUpViewController', but couldn't be loaded.") }
        if walkThrughPopUpViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'walkThrughPopUpViewController' could not be loaded from storyboard 'WalkThrughPopUpViewController' as 'WalkThrughPopUpViewController'.") }
      }
    }

    /// Storyboard `WelcomeViewController`.
    struct welcomeViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "WelcomeViewController"

      var welcomeViewController: RswiftResources.StoryboardViewControllerIdentifier<WelcomeViewController> { .init(identifier: "WelcomeViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "language_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'language_icon' is used in storyboard 'WelcomeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'login_bg' is used in storyboard 'WelcomeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "valleyLogoBlack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'valleyLogoBlack' is used in storyboard 'WelcomeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "valley_powered_by_prospera_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'valley_powered_by_prospera_white' is used in storyboard 'WelcomeViewController', but couldn't be loaded.") }
        if welcomeViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'welcomeViewController' could not be loaded from storyboard 'WelcomeViewController' as 'WelcomeViewController'.") }
      }
    }
  }
}